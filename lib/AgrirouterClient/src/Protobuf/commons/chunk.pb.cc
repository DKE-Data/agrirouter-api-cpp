// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commons/chunk.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "commons/chunk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace agrirouter {
namespace commons {

namespace {

const ::google::protobuf::Descriptor* ChunkComponent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChunkComponent_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_commons_2fchunk_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_commons_2fchunk_2eproto() {
  protobuf_AddDesc_commons_2fchunk_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "commons/chunk.proto");
  GOOGLE_CHECK(file != NULL);
  ChunkComponent_descriptor_ = file->message_type(0);
  static const int ChunkComponent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkComponent, context_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkComponent, current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkComponent, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkComponent, total_size_),
  };
  ChunkComponent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChunkComponent_descriptor_,
      ChunkComponent::internal_default_instance(),
      ChunkComponent_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChunkComponent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkComponent, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_commons_2fchunk_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChunkComponent_descriptor_, ChunkComponent::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_commons_2fchunk_2eproto() {
  ChunkComponent_default_instance_.Shutdown();
  delete ChunkComponent_reflection_;
}

void protobuf_InitDefaults_commons_2fchunk_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  ChunkComponent_default_instance_.DefaultConstruct();
  ChunkComponent_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_commons_2fchunk_2eproto_once_);
void protobuf_InitDefaults_commons_2fchunk_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_commons_2fchunk_2eproto_once_,
                 &protobuf_InitDefaults_commons_2fchunk_2eproto_impl);
}
void protobuf_AddDesc_commons_2fchunk_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_commons_2fchunk_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023commons/chunk.proto\022\022agrirouter.common"
    "s\"X\n\016ChunkComponent\022\022\n\ncontext_id\030\001 \001(\t\022"
    "\017\n\007current\030\002 \001(\003\022\r\n\005total\030\003 \001(\003\022\022\n\ntotal"
    "_size\030\004 \001(\003b\006proto3", 139);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "commons/chunk.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_commons_2fchunk_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_commons_2fchunk_2eproto_once_);
void protobuf_AddDesc_commons_2fchunk_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_commons_2fchunk_2eproto_once_,
                 &protobuf_AddDesc_commons_2fchunk_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_commons_2fchunk_2eproto {
  StaticDescriptorInitializer_commons_2fchunk_2eproto() {
    protobuf_AddDesc_commons_2fchunk_2eproto();
  }
} static_descriptor_initializer_commons_2fchunk_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChunkComponent::kContextIdFieldNumber;
const int ChunkComponent::kCurrentFieldNumber;
const int ChunkComponent::kTotalFieldNumber;
const int ChunkComponent::kTotalSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChunkComponent::ChunkComponent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_commons_2fchunk_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.commons.ChunkComponent)
}

void ChunkComponent::InitAsDefaultInstance() {
}

ChunkComponent::ChunkComponent(const ChunkComponent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agrirouter.commons.ChunkComponent)
}

void ChunkComponent::SharedCtor() {
  context_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&current_, 0, reinterpret_cast<char*>(&total_size_) -
    reinterpret_cast<char*>(&current_) + sizeof(total_size_));
  _cached_size_ = 0;
}

ChunkComponent::~ChunkComponent() {
  // @@protoc_insertion_point(destructor:agrirouter.commons.ChunkComponent)
  SharedDtor();
}

void ChunkComponent::SharedDtor() {
  context_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChunkComponent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChunkComponent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChunkComponent_descriptor_;
}

const ChunkComponent& ChunkComponent::default_instance() {
  protobuf_InitDefaults_commons_2fchunk_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ChunkComponent> ChunkComponent_default_instance_;

ChunkComponent* ChunkComponent::New(::google::protobuf::Arena* arena) const {
  ChunkComponent* n = new ChunkComponent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChunkComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.commons.ChunkComponent)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ChunkComponent, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChunkComponent*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(current_, total_size_);
  context_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ChunkComponent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.commons.ChunkComponent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string context_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_context_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->context_id().data(), this->context_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.commons.ChunkComponent.context_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_current;
        break;
      }

      // optional int64 current = 2;
      case 2: {
        if (tag == 16) {
         parse_current:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &current_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_total;
        break;
      }

      // optional int64 total = 3;
      case 3: {
        if (tag == 24) {
         parse_total:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_total_size;
        break;
      }

      // optional int64 total_size = 4;
      case 4: {
        if (tag == 32) {
         parse_total_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.commons.ChunkComponent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.commons.ChunkComponent)
  return false;
#undef DO_
}

void ChunkComponent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.commons.ChunkComponent)
  // optional string context_id = 1;
  if (this->context_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->context_id().data(), this->context_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.commons.ChunkComponent.context_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->context_id(), output);
  }

  // optional int64 current = 2;
  if (this->current() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->current(), output);
  }

  // optional int64 total = 3;
  if (this->total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->total(), output);
  }

  // optional int64 total_size = 4;
  if (this->total_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->total_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:agrirouter.commons.ChunkComponent)
}

::google::protobuf::uint8* ChunkComponent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.commons.ChunkComponent)
  // optional string context_id = 1;
  if (this->context_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->context_id().data(), this->context_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.commons.ChunkComponent.context_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->context_id(), target);
  }

  // optional int64 current = 2;
  if (this->current() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->current(), target);
  }

  // optional int64 total = 3;
  if (this->total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->total(), target);
  }

  // optional int64 total_size = 4;
  if (this->total_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->total_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.commons.ChunkComponent)
  return target;
}

size_t ChunkComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.commons.ChunkComponent)
  size_t total_size = 0;

  // optional string context_id = 1;
  if (this->context_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->context_id());
  }

  // optional int64 current = 2;
  if (this->current() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->current());
  }

  // optional int64 total = 3;
  if (this->total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total());
  }

  // optional int64 total_size = 4;
  if (this->total_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChunkComponent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.commons.ChunkComponent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ChunkComponent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChunkComponent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.commons.ChunkComponent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.commons.ChunkComponent)
    UnsafeMergeFrom(*source);
  }
}

void ChunkComponent::MergeFrom(const ChunkComponent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.commons.ChunkComponent)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ChunkComponent::UnsafeMergeFrom(const ChunkComponent& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.context_id().size() > 0) {

    context_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.context_id_);
  }
  if (from.current() != 0) {
    set_current(from.current());
  }
  if (from.total() != 0) {
    set_total(from.total());
  }
  if (from.total_size() != 0) {
    set_total_size(from.total_size());
  }
}

void ChunkComponent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.commons.ChunkComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkComponent::CopyFrom(const ChunkComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.commons.ChunkComponent)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ChunkComponent::IsInitialized() const {

  return true;
}

void ChunkComponent::Swap(ChunkComponent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChunkComponent::InternalSwap(ChunkComponent* other) {
  context_id_.Swap(&other->context_id_);
  std::swap(current_, other->current_);
  std::swap(total_, other->total_);
  std::swap(total_size_, other->total_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChunkComponent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChunkComponent_descriptor_;
  metadata.reflection = ChunkComponent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChunkComponent

// optional string context_id = 1;
void ChunkComponent::clear_context_id() {
  context_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChunkComponent::context_id() const {
  // @@protoc_insertion_point(field_get:agrirouter.commons.ChunkComponent.context_id)
  return context_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChunkComponent::set_context_id(const ::std::string& value) {
  
  context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.commons.ChunkComponent.context_id)
}
void ChunkComponent::set_context_id(const char* value) {
  
  context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.commons.ChunkComponent.context_id)
}
void ChunkComponent::set_context_id(const char* value, size_t size) {
  
  context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.commons.ChunkComponent.context_id)
}
::std::string* ChunkComponent::mutable_context_id() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.commons.ChunkComponent.context_id)
  return context_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChunkComponent::release_context_id() {
  // @@protoc_insertion_point(field_release:agrirouter.commons.ChunkComponent.context_id)
  
  return context_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChunkComponent::set_allocated_context_id(::std::string* context_id) {
  if (context_id != NULL) {
    
  } else {
    
  }
  context_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context_id);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.commons.ChunkComponent.context_id)
}

// optional int64 current = 2;
void ChunkComponent::clear_current() {
  current_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ChunkComponent::current() const {
  // @@protoc_insertion_point(field_get:agrirouter.commons.ChunkComponent.current)
  return current_;
}
void ChunkComponent::set_current(::google::protobuf::int64 value) {
  
  current_ = value;
  // @@protoc_insertion_point(field_set:agrirouter.commons.ChunkComponent.current)
}

// optional int64 total = 3;
void ChunkComponent::clear_total() {
  total_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ChunkComponent::total() const {
  // @@protoc_insertion_point(field_get:agrirouter.commons.ChunkComponent.total)
  return total_;
}
void ChunkComponent::set_total(::google::protobuf::int64 value) {
  
  total_ = value;
  // @@protoc_insertion_point(field_set:agrirouter.commons.ChunkComponent.total)
}

// optional int64 total_size = 4;
void ChunkComponent::clear_total_size() {
  total_size_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ChunkComponent::total_size() const {
  // @@protoc_insertion_point(field_get:agrirouter.commons.ChunkComponent.total_size)
  return total_size_;
}
void ChunkComponent::set_total_size(::google::protobuf::int64 value) {
  
  total_size_ = value;
  // @@protoc_insertion_point(field_set:agrirouter.commons.ChunkComponent.total_size)
}

inline const ChunkComponent* ChunkComponent::internal_default_instance() {
  return &ChunkComponent_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace commons
}  // namespace agrirouter

// @@protoc_insertion_point(global_scope)
