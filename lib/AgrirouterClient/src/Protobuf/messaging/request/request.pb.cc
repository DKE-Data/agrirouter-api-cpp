// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messaging/request/request.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messaging/request/request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace agrirouter {
namespace request {

namespace {

const ::google::protobuf::Descriptor* RequestEnvelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestEnvelope_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestEnvelope_Mode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RequestPayloadWrapper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestPayloadWrapper_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messaging_2frequest_2frequest_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_messaging_2frequest_2frequest_2eproto() {
  protobuf_AddDesc_messaging_2frequest_2frequest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messaging/request/request.proto");
  GOOGLE_CHECK(file != NULL);
  RequestEnvelope_descriptor_ = file->message_type(0);
  static const int RequestEnvelope_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEnvelope, application_message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEnvelope, application_message_seq_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEnvelope, technical_message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEnvelope, team_set_context_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEnvelope, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEnvelope, recipients_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEnvelope, chunk_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEnvelope, timestamp_),
  };
  RequestEnvelope_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestEnvelope_descriptor_,
      RequestEnvelope::internal_default_instance(),
      RequestEnvelope_offsets_,
      -1,
      -1,
      -1,
      sizeof(RequestEnvelope),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEnvelope, _internal_metadata_));
  RequestEnvelope_Mode_descriptor_ = RequestEnvelope_descriptor_->enum_type(0);
  RequestPayloadWrapper_descriptor_ = file->message_type(1);
  static const int RequestPayloadWrapper_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPayloadWrapper, details_),
  };
  RequestPayloadWrapper_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestPayloadWrapper_descriptor_,
      RequestPayloadWrapper::internal_default_instance(),
      RequestPayloadWrapper_offsets_,
      -1,
      -1,
      -1,
      sizeof(RequestPayloadWrapper),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPayloadWrapper, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messaging_2frequest_2frequest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestEnvelope_descriptor_, RequestEnvelope::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestPayloadWrapper_descriptor_, RequestPayloadWrapper::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messaging_2frequest_2frequest_2eproto() {
  RequestEnvelope_default_instance_.Shutdown();
  delete RequestEnvelope_reflection_;
  RequestPayloadWrapper_default_instance_.Shutdown();
  delete RequestPayloadWrapper_reflection_;
}

void protobuf_InitDefaults_messaging_2frequest_2frequest_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2fany_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2ftimestamp_2eproto();
  ::agrirouter::commons::protobuf_InitDefaults_commons_2fchunk_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  RequestEnvelope_default_instance_.DefaultConstruct();
  RequestPayloadWrapper_default_instance_.DefaultConstruct();
  RequestEnvelope_default_instance_.get_mutable()->InitAsDefaultInstance();
  RequestPayloadWrapper_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_messaging_2frequest_2frequest_2eproto_once_);
void protobuf_InitDefaults_messaging_2frequest_2frequest_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_messaging_2frequest_2frequest_2eproto_once_,
                 &protobuf_InitDefaults_messaging_2frequest_2frequest_2eproto_impl);
}
void protobuf_AddDesc_messaging_2frequest_2frequest_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_messaging_2frequest_2frequest_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037messaging/request/request.proto\022\022agrir"
    "outer.request\032\031google/protobuf/any.proto"
    "\032\037google/protobuf/timestamp.proto\032\023commo"
    "ns/chunk.proto\"\377\002\n\017RequestEnvelope\022\036\n\026ap"
    "plication_message_id\030\001 \001(\t\022\"\n\032applicatio"
    "n_message_seq_no\030\002 \001(\003\022\036\n\026technical_mess"
    "age_type\030\003 \001(\t\022\033\n\023team_set_context_id\030\004 "
    "\001(\t\0226\n\004mode\030\005 \001(\0162(.agrirouter.request.R"
    "equestEnvelope.Mode\022\022\n\nrecipients\030\006 \003(\t\022"
    "6\n\nchunk_info\030\007 \001(\0132\".agrirouter.commons"
    ".ChunkComponent\022-\n\ttimestamp\030\010 \001(\0132\032.goo"
    "gle.protobuf.Timestamp\"8\n\004Mode\022\n\n\006DIRECT"
    "\020\000\022\013\n\007PUBLISH\020\001\022\027\n\023PUBLISH_WITH_DIRECT\020\002"
    "\">\n\025RequestPayloadWrapper\022%\n\007details\030\001 \001"
    "(\0132\024.google.protobuf.Anyb\006proto3", 592);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messaging/request/request.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fany_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::agrirouter::commons::protobuf_AddDesc_commons_2fchunk_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messaging_2frequest_2frequest_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_messaging_2frequest_2frequest_2eproto_once_);
void protobuf_AddDesc_messaging_2frequest_2frequest_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_messaging_2frequest_2frequest_2eproto_once_,
                 &protobuf_AddDesc_messaging_2frequest_2frequest_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messaging_2frequest_2frequest_2eproto {
  StaticDescriptorInitializer_messaging_2frequest_2frequest_2eproto() {
    protobuf_AddDesc_messaging_2frequest_2frequest_2eproto();
  }
} static_descriptor_initializer_messaging_2frequest_2frequest_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* RequestEnvelope_Mode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestEnvelope_Mode_descriptor_;
}
bool RequestEnvelope_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RequestEnvelope_Mode RequestEnvelope::DIRECT;
const RequestEnvelope_Mode RequestEnvelope::PUBLISH;
const RequestEnvelope_Mode RequestEnvelope::PUBLISH_WITH_DIRECT;
const RequestEnvelope_Mode RequestEnvelope::Mode_MIN;
const RequestEnvelope_Mode RequestEnvelope::Mode_MAX;
const int RequestEnvelope::Mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestEnvelope::kApplicationMessageIdFieldNumber;
const int RequestEnvelope::kApplicationMessageSeqNoFieldNumber;
const int RequestEnvelope::kTechnicalMessageTypeFieldNumber;
const int RequestEnvelope::kTeamSetContextIdFieldNumber;
const int RequestEnvelope::kModeFieldNumber;
const int RequestEnvelope::kRecipientsFieldNumber;
const int RequestEnvelope::kChunkInfoFieldNumber;
const int RequestEnvelope::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestEnvelope::RequestEnvelope()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_messaging_2frequest_2frequest_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.request.RequestEnvelope)
}

void RequestEnvelope::InitAsDefaultInstance() {
  chunk_info_ = const_cast< ::agrirouter::commons::ChunkComponent*>(
      ::agrirouter::commons::ChunkComponent::internal_default_instance());
  timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}

RequestEnvelope::RequestEnvelope(const RequestEnvelope& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agrirouter.request.RequestEnvelope)
}

void RequestEnvelope::SharedCtor() {
  application_message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  technical_message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_set_context_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chunk_info_ = NULL;
  timestamp_ = NULL;
  ::memset(&application_message_seq_no_, 0, reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&application_message_seq_no_) + sizeof(mode_));
  _cached_size_ = 0;
}

RequestEnvelope::~RequestEnvelope() {
  // @@protoc_insertion_point(destructor:agrirouter.request.RequestEnvelope)
  SharedDtor();
}

void RequestEnvelope::SharedDtor() {
  application_message_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  technical_message_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_set_context_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &RequestEnvelope_default_instance_.get()) {
    delete chunk_info_;
    delete timestamp_;
  }
}

void RequestEnvelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestEnvelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestEnvelope_descriptor_;
}

const RequestEnvelope& RequestEnvelope::default_instance() {
  protobuf_InitDefaults_messaging_2frequest_2frequest_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RequestEnvelope> RequestEnvelope_default_instance_;

RequestEnvelope* RequestEnvelope::New(::google::protobuf::Arena* arena) const {
  RequestEnvelope* n = new RequestEnvelope;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestEnvelope::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.request.RequestEnvelope)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RequestEnvelope, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RequestEnvelope*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(application_message_seq_no_, mode_);
  application_message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  technical_message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_set_context_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && chunk_info_ != NULL) delete chunk_info_;
  chunk_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  recipients_.Clear();
}

bool RequestEnvelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.request.RequestEnvelope)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string application_message_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application_message_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->application_message_id().data(), this->application_message_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.request.RequestEnvelope.application_message_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_application_message_seq_no;
        break;
      }

      // optional int64 application_message_seq_no = 2;
      case 2: {
        if (tag == 16) {
         parse_application_message_seq_no:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &application_message_seq_no_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_technical_message_type;
        break;
      }

      // optional string technical_message_type = 3;
      case 3: {
        if (tag == 26) {
         parse_technical_message_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_technical_message_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->technical_message_type().data(), this->technical_message_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.request.RequestEnvelope.technical_message_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_team_set_context_id;
        break;
      }

      // optional string team_set_context_id = 4;
      case 4: {
        if (tag == 34) {
         parse_team_set_context_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_set_context_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->team_set_context_id().data(), this->team_set_context_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.request.RequestEnvelope.team_set_context_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mode;
        break;
      }

      // optional .agrirouter.request.RequestEnvelope.Mode mode = 5;
      case 5: {
        if (tag == 40) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::agrirouter::request::RequestEnvelope_Mode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_recipients;
        break;
      }

      // repeated string recipients = 6;
      case 6: {
        if (tag == 50) {
         parse_recipients:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_recipients()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->recipients(this->recipients_size() - 1).data(),
            this->recipients(this->recipients_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.request.RequestEnvelope.recipients"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_recipients;
        if (input->ExpectTag(58)) goto parse_chunk_info;
        break;
      }

      // optional .agrirouter.commons.ChunkComponent chunk_info = 7;
      case 7: {
        if (tag == 58) {
         parse_chunk_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chunk_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_timestamp;
        break;
      }

      // optional .google.protobuf.Timestamp timestamp = 8;
      case 8: {
        if (tag == 66) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.request.RequestEnvelope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.request.RequestEnvelope)
  return false;
#undef DO_
}

void RequestEnvelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.request.RequestEnvelope)
  // optional string application_message_id = 1;
  if (this->application_message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->application_message_id().data(), this->application_message_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.request.RequestEnvelope.application_message_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->application_message_id(), output);
  }

  // optional int64 application_message_seq_no = 2;
  if (this->application_message_seq_no() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->application_message_seq_no(), output);
  }

  // optional string technical_message_type = 3;
  if (this->technical_message_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->technical_message_type().data(), this->technical_message_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.request.RequestEnvelope.technical_message_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->technical_message_type(), output);
  }

  // optional string team_set_context_id = 4;
  if (this->team_set_context_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team_set_context_id().data(), this->team_set_context_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.request.RequestEnvelope.team_set_context_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->team_set_context_id(), output);
  }

  // optional .agrirouter.request.RequestEnvelope.Mode mode = 5;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->mode(), output);
  }

  // repeated string recipients = 6;
  for (int i = 0; i < this->recipients_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recipients(i).data(), this->recipients(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.request.RequestEnvelope.recipients");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->recipients(i), output);
  }

  // optional .agrirouter.commons.ChunkComponent chunk_info = 7;
  if (this->has_chunk_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->chunk_info_, output);
  }

  // optional .google.protobuf.Timestamp timestamp = 8;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->timestamp_, output);
  }

  // @@protoc_insertion_point(serialize_end:agrirouter.request.RequestEnvelope)
}

::google::protobuf::uint8* RequestEnvelope::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.request.RequestEnvelope)
  // optional string application_message_id = 1;
  if (this->application_message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->application_message_id().data(), this->application_message_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.request.RequestEnvelope.application_message_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->application_message_id(), target);
  }

  // optional int64 application_message_seq_no = 2;
  if (this->application_message_seq_no() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->application_message_seq_no(), target);
  }

  // optional string technical_message_type = 3;
  if (this->technical_message_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->technical_message_type().data(), this->technical_message_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.request.RequestEnvelope.technical_message_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->technical_message_type(), target);
  }

  // optional string team_set_context_id = 4;
  if (this->team_set_context_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team_set_context_id().data(), this->team_set_context_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.request.RequestEnvelope.team_set_context_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->team_set_context_id(), target);
  }

  // optional .agrirouter.request.RequestEnvelope.Mode mode = 5;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->mode(), target);
  }

  // repeated string recipients = 6;
  for (int i = 0; i < this->recipients_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recipients(i).data(), this->recipients(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.request.RequestEnvelope.recipients");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->recipients(i), target);
  }

  // optional .agrirouter.commons.ChunkComponent chunk_info = 7;
  if (this->has_chunk_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->chunk_info_, false, target);
  }

  // optional .google.protobuf.Timestamp timestamp = 8;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->timestamp_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.request.RequestEnvelope)
  return target;
}

size_t RequestEnvelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.request.RequestEnvelope)
  size_t total_size = 0;

  // optional string application_message_id = 1;
  if (this->application_message_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->application_message_id());
  }

  // optional int64 application_message_seq_no = 2;
  if (this->application_message_seq_no() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->application_message_seq_no());
  }

  // optional string technical_message_type = 3;
  if (this->technical_message_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->technical_message_type());
  }

  // optional string team_set_context_id = 4;
  if (this->team_set_context_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->team_set_context_id());
  }

  // optional .agrirouter.request.RequestEnvelope.Mode mode = 5;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  // optional .agrirouter.commons.ChunkComponent chunk_info = 7;
  if (this->has_chunk_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->chunk_info_);
  }

  // optional .google.protobuf.Timestamp timestamp = 8;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  // repeated string recipients = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->recipients_size());
  for (int i = 0; i < this->recipients_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->recipients(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestEnvelope::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.request.RequestEnvelope)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RequestEnvelope* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestEnvelope>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.request.RequestEnvelope)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.request.RequestEnvelope)
    UnsafeMergeFrom(*source);
  }
}

void RequestEnvelope::MergeFrom(const RequestEnvelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.request.RequestEnvelope)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RequestEnvelope::UnsafeMergeFrom(const RequestEnvelope& from) {
  GOOGLE_DCHECK(&from != this);
  recipients_.UnsafeMergeFrom(from.recipients_);
  if (from.application_message_id().size() > 0) {

    application_message_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_message_id_);
  }
  if (from.application_message_seq_no() != 0) {
    set_application_message_seq_no(from.application_message_seq_no());
  }
  if (from.technical_message_type().size() > 0) {

    technical_message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.technical_message_type_);
  }
  if (from.team_set_context_id().size() > 0) {

    team_set_context_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_set_context_id_);
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.has_chunk_info()) {
    mutable_chunk_info()->::agrirouter::commons::ChunkComponent::MergeFrom(from.chunk_info());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
  }
}

void RequestEnvelope::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.request.RequestEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestEnvelope::CopyFrom(const RequestEnvelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.request.RequestEnvelope)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RequestEnvelope::IsInitialized() const {

  return true;
}

void RequestEnvelope::Swap(RequestEnvelope* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestEnvelope::InternalSwap(RequestEnvelope* other) {
  application_message_id_.Swap(&other->application_message_id_);
  std::swap(application_message_seq_no_, other->application_message_seq_no_);
  technical_message_type_.Swap(&other->technical_message_type_);
  team_set_context_id_.Swap(&other->team_set_context_id_);
  std::swap(mode_, other->mode_);
  recipients_.UnsafeArenaSwap(&other->recipients_);
  std::swap(chunk_info_, other->chunk_info_);
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestEnvelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestEnvelope_descriptor_;
  metadata.reflection = RequestEnvelope_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestEnvelope

// optional string application_message_id = 1;
void RequestEnvelope::clear_application_message_id() {
  application_message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RequestEnvelope::application_message_id() const {
  // @@protoc_insertion_point(field_get:agrirouter.request.RequestEnvelope.application_message_id)
  return application_message_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequestEnvelope::set_application_message_id(const ::std::string& value) {
  
  application_message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.request.RequestEnvelope.application_message_id)
}
void RequestEnvelope::set_application_message_id(const char* value) {
  
  application_message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.request.RequestEnvelope.application_message_id)
}
void RequestEnvelope::set_application_message_id(const char* value, size_t size) {
  
  application_message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.request.RequestEnvelope.application_message_id)
}
::std::string* RequestEnvelope::mutable_application_message_id() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.request.RequestEnvelope.application_message_id)
  return application_message_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RequestEnvelope::release_application_message_id() {
  // @@protoc_insertion_point(field_release:agrirouter.request.RequestEnvelope.application_message_id)
  
  return application_message_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequestEnvelope::set_allocated_application_message_id(::std::string* application_message_id) {
  if (application_message_id != NULL) {
    
  } else {
    
  }
  application_message_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), application_message_id);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.request.RequestEnvelope.application_message_id)
}

// optional int64 application_message_seq_no = 2;
void RequestEnvelope::clear_application_message_seq_no() {
  application_message_seq_no_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 RequestEnvelope::application_message_seq_no() const {
  // @@protoc_insertion_point(field_get:agrirouter.request.RequestEnvelope.application_message_seq_no)
  return application_message_seq_no_;
}
void RequestEnvelope::set_application_message_seq_no(::google::protobuf::int64 value) {
  
  application_message_seq_no_ = value;
  // @@protoc_insertion_point(field_set:agrirouter.request.RequestEnvelope.application_message_seq_no)
}

// optional string technical_message_type = 3;
void RequestEnvelope::clear_technical_message_type() {
  technical_message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RequestEnvelope::technical_message_type() const {
  // @@protoc_insertion_point(field_get:agrirouter.request.RequestEnvelope.technical_message_type)
  return technical_message_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequestEnvelope::set_technical_message_type(const ::std::string& value) {
  
  technical_message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.request.RequestEnvelope.technical_message_type)
}
void RequestEnvelope::set_technical_message_type(const char* value) {
  
  technical_message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.request.RequestEnvelope.technical_message_type)
}
void RequestEnvelope::set_technical_message_type(const char* value, size_t size) {
  
  technical_message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.request.RequestEnvelope.technical_message_type)
}
::std::string* RequestEnvelope::mutable_technical_message_type() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.request.RequestEnvelope.technical_message_type)
  return technical_message_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RequestEnvelope::release_technical_message_type() {
  // @@protoc_insertion_point(field_release:agrirouter.request.RequestEnvelope.technical_message_type)
  
  return technical_message_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequestEnvelope::set_allocated_technical_message_type(::std::string* technical_message_type) {
  if (technical_message_type != NULL) {
    
  } else {
    
  }
  technical_message_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), technical_message_type);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.request.RequestEnvelope.technical_message_type)
}

// optional string team_set_context_id = 4;
void RequestEnvelope::clear_team_set_context_id() {
  team_set_context_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RequestEnvelope::team_set_context_id() const {
  // @@protoc_insertion_point(field_get:agrirouter.request.RequestEnvelope.team_set_context_id)
  return team_set_context_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequestEnvelope::set_team_set_context_id(const ::std::string& value) {
  
  team_set_context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.request.RequestEnvelope.team_set_context_id)
}
void RequestEnvelope::set_team_set_context_id(const char* value) {
  
  team_set_context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.request.RequestEnvelope.team_set_context_id)
}
void RequestEnvelope::set_team_set_context_id(const char* value, size_t size) {
  
  team_set_context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.request.RequestEnvelope.team_set_context_id)
}
::std::string* RequestEnvelope::mutable_team_set_context_id() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.request.RequestEnvelope.team_set_context_id)
  return team_set_context_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RequestEnvelope::release_team_set_context_id() {
  // @@protoc_insertion_point(field_release:agrirouter.request.RequestEnvelope.team_set_context_id)
  
  return team_set_context_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequestEnvelope::set_allocated_team_set_context_id(::std::string* team_set_context_id) {
  if (team_set_context_id != NULL) {
    
  } else {
    
  }
  team_set_context_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_set_context_id);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.request.RequestEnvelope.team_set_context_id)
}

// optional .agrirouter.request.RequestEnvelope.Mode mode = 5;
void RequestEnvelope::clear_mode() {
  mode_ = 0;
}
::agrirouter::request::RequestEnvelope_Mode RequestEnvelope::mode() const {
  // @@protoc_insertion_point(field_get:agrirouter.request.RequestEnvelope.mode)
  return static_cast< ::agrirouter::request::RequestEnvelope_Mode >(mode_);
}
void RequestEnvelope::set_mode(::agrirouter::request::RequestEnvelope_Mode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:agrirouter.request.RequestEnvelope.mode)
}

// repeated string recipients = 6;
int RequestEnvelope::recipients_size() const {
  return recipients_.size();
}
void RequestEnvelope::clear_recipients() {
  recipients_.Clear();
}
const ::std::string& RequestEnvelope::recipients(int index) const {
  // @@protoc_insertion_point(field_get:agrirouter.request.RequestEnvelope.recipients)
  return recipients_.Get(index);
}
::std::string* RequestEnvelope::mutable_recipients(int index) {
  // @@protoc_insertion_point(field_mutable:agrirouter.request.RequestEnvelope.recipients)
  return recipients_.Mutable(index);
}
void RequestEnvelope::set_recipients(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:agrirouter.request.RequestEnvelope.recipients)
  recipients_.Mutable(index)->assign(value);
}
void RequestEnvelope::set_recipients(int index, const char* value) {
  recipients_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:agrirouter.request.RequestEnvelope.recipients)
}
void RequestEnvelope::set_recipients(int index, const char* value, size_t size) {
  recipients_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:agrirouter.request.RequestEnvelope.recipients)
}
::std::string* RequestEnvelope::add_recipients() {
  // @@protoc_insertion_point(field_add_mutable:agrirouter.request.RequestEnvelope.recipients)
  return recipients_.Add();
}
void RequestEnvelope::add_recipients(const ::std::string& value) {
  recipients_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:agrirouter.request.RequestEnvelope.recipients)
}
void RequestEnvelope::add_recipients(const char* value) {
  recipients_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:agrirouter.request.RequestEnvelope.recipients)
}
void RequestEnvelope::add_recipients(const char* value, size_t size) {
  recipients_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:agrirouter.request.RequestEnvelope.recipients)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
RequestEnvelope::recipients() const {
  // @@protoc_insertion_point(field_list:agrirouter.request.RequestEnvelope.recipients)
  return recipients_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
RequestEnvelope::mutable_recipients() {
  // @@protoc_insertion_point(field_mutable_list:agrirouter.request.RequestEnvelope.recipients)
  return &recipients_;
}

// optional .agrirouter.commons.ChunkComponent chunk_info = 7;
bool RequestEnvelope::has_chunk_info() const {
  return this != internal_default_instance() && chunk_info_ != NULL;
}
void RequestEnvelope::clear_chunk_info() {
  if (GetArenaNoVirtual() == NULL && chunk_info_ != NULL) delete chunk_info_;
  chunk_info_ = NULL;
}
const ::agrirouter::commons::ChunkComponent& RequestEnvelope::chunk_info() const {
  // @@protoc_insertion_point(field_get:agrirouter.request.RequestEnvelope.chunk_info)
  return chunk_info_ != NULL ? *chunk_info_
                         : *::agrirouter::commons::ChunkComponent::internal_default_instance();
}
::agrirouter::commons::ChunkComponent* RequestEnvelope::mutable_chunk_info() {
  
  if (chunk_info_ == NULL) {
    chunk_info_ = new ::agrirouter::commons::ChunkComponent;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.request.RequestEnvelope.chunk_info)
  return chunk_info_;
}
::agrirouter::commons::ChunkComponent* RequestEnvelope::release_chunk_info() {
  // @@protoc_insertion_point(field_release:agrirouter.request.RequestEnvelope.chunk_info)
  
  ::agrirouter::commons::ChunkComponent* temp = chunk_info_;
  chunk_info_ = NULL;
  return temp;
}
void RequestEnvelope::set_allocated_chunk_info(::agrirouter::commons::ChunkComponent* chunk_info) {
  delete chunk_info_;
  chunk_info_ = chunk_info;
  if (chunk_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:agrirouter.request.RequestEnvelope.chunk_info)
}

// optional .google.protobuf.Timestamp timestamp = 8;
bool RequestEnvelope::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
void RequestEnvelope::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::google::protobuf::Timestamp& RequestEnvelope::timestamp() const {
  // @@protoc_insertion_point(field_get:agrirouter.request.RequestEnvelope.timestamp)
  return timestamp_ != NULL ? *timestamp_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* RequestEnvelope::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.request.RequestEnvelope.timestamp)
  return timestamp_;
}
::google::protobuf::Timestamp* RequestEnvelope::release_timestamp() {
  // @@protoc_insertion_point(field_release:agrirouter.request.RequestEnvelope.timestamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void RequestEnvelope::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:agrirouter.request.RequestEnvelope.timestamp)
}

inline const RequestEnvelope* RequestEnvelope::internal_default_instance() {
  return &RequestEnvelope_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestPayloadWrapper::kDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestPayloadWrapper::RequestPayloadWrapper()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_messaging_2frequest_2frequest_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.request.RequestPayloadWrapper)
}

void RequestPayloadWrapper::InitAsDefaultInstance() {
  details_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}

RequestPayloadWrapper::RequestPayloadWrapper(const RequestPayloadWrapper& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agrirouter.request.RequestPayloadWrapper)
}

void RequestPayloadWrapper::SharedCtor() {
  details_ = NULL;
  _cached_size_ = 0;
}

RequestPayloadWrapper::~RequestPayloadWrapper() {
  // @@protoc_insertion_point(destructor:agrirouter.request.RequestPayloadWrapper)
  SharedDtor();
}

void RequestPayloadWrapper::SharedDtor() {
  if (this != &RequestPayloadWrapper_default_instance_.get()) {
    delete details_;
  }
}

void RequestPayloadWrapper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestPayloadWrapper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestPayloadWrapper_descriptor_;
}

const RequestPayloadWrapper& RequestPayloadWrapper::default_instance() {
  protobuf_InitDefaults_messaging_2frequest_2frequest_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RequestPayloadWrapper> RequestPayloadWrapper_default_instance_;

RequestPayloadWrapper* RequestPayloadWrapper::New(::google::protobuf::Arena* arena) const {
  RequestPayloadWrapper* n = new RequestPayloadWrapper;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestPayloadWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.request.RequestPayloadWrapper)
  if (GetArenaNoVirtual() == NULL && details_ != NULL) delete details_;
  details_ = NULL;
}

bool RequestPayloadWrapper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.request.RequestPayloadWrapper)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.protobuf.Any details = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.request.RequestPayloadWrapper)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.request.RequestPayloadWrapper)
  return false;
#undef DO_
}

void RequestPayloadWrapper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.request.RequestPayloadWrapper)
  // optional .google.protobuf.Any details = 1;
  if (this->has_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->details_, output);
  }

  // @@protoc_insertion_point(serialize_end:agrirouter.request.RequestPayloadWrapper)
}

::google::protobuf::uint8* RequestPayloadWrapper::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.request.RequestPayloadWrapper)
  // optional .google.protobuf.Any details = 1;
  if (this->has_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->details_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.request.RequestPayloadWrapper)
  return target;
}

size_t RequestPayloadWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.request.RequestPayloadWrapper)
  size_t total_size = 0;

  // optional .google.protobuf.Any details = 1;
  if (this->has_details()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->details_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestPayloadWrapper::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.request.RequestPayloadWrapper)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RequestPayloadWrapper* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestPayloadWrapper>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.request.RequestPayloadWrapper)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.request.RequestPayloadWrapper)
    UnsafeMergeFrom(*source);
  }
}

void RequestPayloadWrapper::MergeFrom(const RequestPayloadWrapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.request.RequestPayloadWrapper)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RequestPayloadWrapper::UnsafeMergeFrom(const RequestPayloadWrapper& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_details()) {
    mutable_details()->::google::protobuf::Any::MergeFrom(from.details());
  }
}

void RequestPayloadWrapper::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.request.RequestPayloadWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPayloadWrapper::CopyFrom(const RequestPayloadWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.request.RequestPayloadWrapper)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RequestPayloadWrapper::IsInitialized() const {

  return true;
}

void RequestPayloadWrapper::Swap(RequestPayloadWrapper* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestPayloadWrapper::InternalSwap(RequestPayloadWrapper* other) {
  std::swap(details_, other->details_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestPayloadWrapper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestPayloadWrapper_descriptor_;
  metadata.reflection = RequestPayloadWrapper_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestPayloadWrapper

// optional .google.protobuf.Any details = 1;
bool RequestPayloadWrapper::has_details() const {
  return this != internal_default_instance() && details_ != NULL;
}
void RequestPayloadWrapper::clear_details() {
  if (GetArenaNoVirtual() == NULL && details_ != NULL) delete details_;
  details_ = NULL;
}
const ::google::protobuf::Any& RequestPayloadWrapper::details() const {
  // @@protoc_insertion_point(field_get:agrirouter.request.RequestPayloadWrapper.details)
  return details_ != NULL ? *details_
                         : *::google::protobuf::Any::internal_default_instance();
}
::google::protobuf::Any* RequestPayloadWrapper::mutable_details() {
  
  if (details_ == NULL) {
    details_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.request.RequestPayloadWrapper.details)
  return details_;
}
::google::protobuf::Any* RequestPayloadWrapper::release_details() {
  // @@protoc_insertion_point(field_release:agrirouter.request.RequestPayloadWrapper.details)
  
  ::google::protobuf::Any* temp = details_;
  details_ = NULL;
  return temp;
}
void RequestPayloadWrapper::set_allocated_details(::google::protobuf::Any* details) {
  delete details_;
  details_ = details;
  if (details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:agrirouter.request.RequestPayloadWrapper.details)
}

inline const RequestPayloadWrapper* RequestPayloadWrapper::internal_default_instance() {
  return &RequestPayloadWrapper_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace request
}  // namespace agrirouter

// @@protoc_insertion_point(global_scope)
