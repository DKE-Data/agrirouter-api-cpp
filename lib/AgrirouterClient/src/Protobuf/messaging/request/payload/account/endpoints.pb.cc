// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messaging/request/payload/account/endpoints.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messaging/request/payload/account/endpoints.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace agrirouter {
namespace request {
namespace payload {
namespace account {

namespace {

const ::google::protobuf::Descriptor* ListEndpointsQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListEndpointsQuery_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ListEndpointsQuery_Direction_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto() {
  protobuf_AddDesc_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messaging/request/payload/account/endpoints.proto");
  GOOGLE_CHECK(file != NULL);
  ListEndpointsQuery_descriptor_ = file->message_type(0);
  static const int ListEndpointsQuery_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListEndpointsQuery, technical_message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListEndpointsQuery, direction_),
  };
  ListEndpointsQuery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListEndpointsQuery_descriptor_,
      ListEndpointsQuery::internal_default_instance(),
      ListEndpointsQuery_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListEndpointsQuery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListEndpointsQuery, _internal_metadata_));
  ListEndpointsQuery_Direction_descriptor_ = ListEndpointsQuery_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListEndpointsQuery_descriptor_, ListEndpointsQuery::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto() {
  ListEndpointsQuery_default_instance_.Shutdown();
  delete ListEndpointsQuery_reflection_;
}

void protobuf_InitDefaults_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  ListEndpointsQuery_default_instance_.DefaultConstruct();
  ListEndpointsQuery_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto_once_);
void protobuf_InitDefaults_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto_once_,
                 &protobuf_InitDefaults_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto_impl);
}
void protobuf_AddDesc_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n1messaging/request/payload/account/endp"
    "oints.proto\022\"agrirouter.request.payload."
    "account\"\277\001\n\022ListEndpointsQuery\022\036\n\026techni"
    "cal_message_type\030\001 \001(\t\022S\n\tdirection\030\002 \001("
    "\0162@.agrirouter.request.payload.account.L"
    "istEndpointsQuery.Direction\"4\n\tDirection"
    "\022\010\n\004SEND\020\000\022\013\n\007RECEIVE\020\001\022\020\n\014SEND_RECEIVE\020"
    "\002b\006proto3", 289);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messaging/request/payload/account/endpoints.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto_once_);
void protobuf_AddDesc_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto_once_,
                 &protobuf_AddDesc_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto {
  StaticDescriptorInitializer_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto() {
    protobuf_AddDesc_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto();
  }
} static_descriptor_initializer_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* ListEndpointsQuery_Direction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListEndpointsQuery_Direction_descriptor_;
}
bool ListEndpointsQuery_Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ListEndpointsQuery_Direction ListEndpointsQuery::SEND;
const ListEndpointsQuery_Direction ListEndpointsQuery::RECEIVE;
const ListEndpointsQuery_Direction ListEndpointsQuery::SEND_RECEIVE;
const ListEndpointsQuery_Direction ListEndpointsQuery::Direction_MIN;
const ListEndpointsQuery_Direction ListEndpointsQuery::Direction_MAX;
const int ListEndpointsQuery::Direction_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListEndpointsQuery::kTechnicalMessageTypeFieldNumber;
const int ListEndpointsQuery::kDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListEndpointsQuery::ListEndpointsQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.request.payload.account.ListEndpointsQuery)
}

void ListEndpointsQuery::InitAsDefaultInstance() {
}

ListEndpointsQuery::ListEndpointsQuery(const ListEndpointsQuery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agrirouter.request.payload.account.ListEndpointsQuery)
}

void ListEndpointsQuery::SharedCtor() {
  technical_message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_ = 0;
  _cached_size_ = 0;
}

ListEndpointsQuery::~ListEndpointsQuery() {
  // @@protoc_insertion_point(destructor:agrirouter.request.payload.account.ListEndpointsQuery)
  SharedDtor();
}

void ListEndpointsQuery::SharedDtor() {
  technical_message_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListEndpointsQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListEndpointsQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListEndpointsQuery_descriptor_;
}

const ListEndpointsQuery& ListEndpointsQuery::default_instance() {
  protobuf_InitDefaults_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ListEndpointsQuery> ListEndpointsQuery_default_instance_;

ListEndpointsQuery* ListEndpointsQuery::New(::google::protobuf::Arena* arena) const {
  ListEndpointsQuery* n = new ListEndpointsQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListEndpointsQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.request.payload.account.ListEndpointsQuery)
  technical_message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_ = 0;
}

bool ListEndpointsQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.request.payload.account.ListEndpointsQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string technical_message_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_technical_message_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->technical_message_type().data(), this->technical_message_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.request.payload.account.ListEndpointsQuery.technical_message_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_direction;
        break;
      }

      // optional .agrirouter.request.payload.account.ListEndpointsQuery.Direction direction = 2;
      case 2: {
        if (tag == 16) {
         parse_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction(static_cast< ::agrirouter::request::payload::account::ListEndpointsQuery_Direction >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.request.payload.account.ListEndpointsQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.request.payload.account.ListEndpointsQuery)
  return false;
#undef DO_
}

void ListEndpointsQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.request.payload.account.ListEndpointsQuery)
  // optional string technical_message_type = 1;
  if (this->technical_message_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->technical_message_type().data(), this->technical_message_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.request.payload.account.ListEndpointsQuery.technical_message_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->technical_message_type(), output);
  }

  // optional .agrirouter.request.payload.account.ListEndpointsQuery.Direction direction = 2;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->direction(), output);
  }

  // @@protoc_insertion_point(serialize_end:agrirouter.request.payload.account.ListEndpointsQuery)
}

::google::protobuf::uint8* ListEndpointsQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.request.payload.account.ListEndpointsQuery)
  // optional string technical_message_type = 1;
  if (this->technical_message_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->technical_message_type().data(), this->technical_message_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.request.payload.account.ListEndpointsQuery.technical_message_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->technical_message_type(), target);
  }

  // optional .agrirouter.request.payload.account.ListEndpointsQuery.Direction direction = 2;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->direction(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.request.payload.account.ListEndpointsQuery)
  return target;
}

size_t ListEndpointsQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.request.payload.account.ListEndpointsQuery)
  size_t total_size = 0;

  // optional string technical_message_type = 1;
  if (this->technical_message_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->technical_message_type());
  }

  // optional .agrirouter.request.payload.account.ListEndpointsQuery.Direction direction = 2;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListEndpointsQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.request.payload.account.ListEndpointsQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListEndpointsQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListEndpointsQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.request.payload.account.ListEndpointsQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.request.payload.account.ListEndpointsQuery)
    UnsafeMergeFrom(*source);
  }
}

void ListEndpointsQuery::MergeFrom(const ListEndpointsQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.request.payload.account.ListEndpointsQuery)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ListEndpointsQuery::UnsafeMergeFrom(const ListEndpointsQuery& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.technical_message_type().size() > 0) {

    technical_message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.technical_message_type_);
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
}

void ListEndpointsQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.request.payload.account.ListEndpointsQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListEndpointsQuery::CopyFrom(const ListEndpointsQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.request.payload.account.ListEndpointsQuery)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ListEndpointsQuery::IsInitialized() const {

  return true;
}

void ListEndpointsQuery::Swap(ListEndpointsQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListEndpointsQuery::InternalSwap(ListEndpointsQuery* other) {
  technical_message_type_.Swap(&other->technical_message_type_);
  std::swap(direction_, other->direction_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListEndpointsQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListEndpointsQuery_descriptor_;
  metadata.reflection = ListEndpointsQuery_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListEndpointsQuery

// optional string technical_message_type = 1;
void ListEndpointsQuery::clear_technical_message_type() {
  technical_message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListEndpointsQuery::technical_message_type() const {
  // @@protoc_insertion_point(field_get:agrirouter.request.payload.account.ListEndpointsQuery.technical_message_type)
  return technical_message_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListEndpointsQuery::set_technical_message_type(const ::std::string& value) {
  
  technical_message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.request.payload.account.ListEndpointsQuery.technical_message_type)
}
void ListEndpointsQuery::set_technical_message_type(const char* value) {
  
  technical_message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.request.payload.account.ListEndpointsQuery.technical_message_type)
}
void ListEndpointsQuery::set_technical_message_type(const char* value, size_t size) {
  
  technical_message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.request.payload.account.ListEndpointsQuery.technical_message_type)
}
::std::string* ListEndpointsQuery::mutable_technical_message_type() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.request.payload.account.ListEndpointsQuery.technical_message_type)
  return technical_message_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListEndpointsQuery::release_technical_message_type() {
  // @@protoc_insertion_point(field_release:agrirouter.request.payload.account.ListEndpointsQuery.technical_message_type)
  
  return technical_message_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListEndpointsQuery::set_allocated_technical_message_type(::std::string* technical_message_type) {
  if (technical_message_type != NULL) {
    
  } else {
    
  }
  technical_message_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), technical_message_type);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.request.payload.account.ListEndpointsQuery.technical_message_type)
}

// optional .agrirouter.request.payload.account.ListEndpointsQuery.Direction direction = 2;
void ListEndpointsQuery::clear_direction() {
  direction_ = 0;
}
::agrirouter::request::payload::account::ListEndpointsQuery_Direction ListEndpointsQuery::direction() const {
  // @@protoc_insertion_point(field_get:agrirouter.request.payload.account.ListEndpointsQuery.direction)
  return static_cast< ::agrirouter::request::payload::account::ListEndpointsQuery_Direction >(direction_);
}
void ListEndpointsQuery::set_direction(::agrirouter::request::payload::account::ListEndpointsQuery_Direction value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:agrirouter.request.payload.account.ListEndpointsQuery.direction)
}

inline const ListEndpointsQuery* ListEndpointsQuery::internal_default_instance() {
  return &ListEndpointsQuery_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace account
}  // namespace payload
}  // namespace request
}  // namespace agrirouter

// @@protoc_insertion_point(global_scope)
