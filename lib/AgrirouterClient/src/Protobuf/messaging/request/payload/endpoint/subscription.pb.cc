// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messaging/request/payload/endpoint/subscription.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messaging/request/payload/endpoint/subscription.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace agrirouter {
namespace request {
namespace payload {
namespace endpoint {

namespace {

const ::google::protobuf::Descriptor* Subscription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Subscription_reflection_ = NULL;
const ::google::protobuf::Descriptor* Subscription_MessageTypeSubscriptionItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Subscription_MessageTypeSubscriptionItem_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messaging_2frequest_2fpayload_2fendpoint_2fsubscription_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_messaging_2frequest_2fpayload_2fendpoint_2fsubscription_2eproto() {
  protobuf_AddDesc_messaging_2frequest_2fpayload_2fendpoint_2fsubscription_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messaging/request/payload/endpoint/subscription.proto");
  GOOGLE_CHECK(file != NULL);
  Subscription_descriptor_ = file->message_type(0);
  static const int Subscription_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, technical_message_types_),
  };
  Subscription_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Subscription_descriptor_,
      Subscription::internal_default_instance(),
      Subscription_offsets_,
      -1,
      -1,
      -1,
      sizeof(Subscription),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, _internal_metadata_));
  Subscription_MessageTypeSubscriptionItem_descriptor_ = Subscription_descriptor_->nested_type(0);
  static const int Subscription_MessageTypeSubscriptionItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription_MessageTypeSubscriptionItem, technical_message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription_MessageTypeSubscriptionItem, ddis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription_MessageTypeSubscriptionItem, position_),
  };
  Subscription_MessageTypeSubscriptionItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Subscription_MessageTypeSubscriptionItem_descriptor_,
      Subscription_MessageTypeSubscriptionItem::internal_default_instance(),
      Subscription_MessageTypeSubscriptionItem_offsets_,
      -1,
      -1,
      -1,
      sizeof(Subscription_MessageTypeSubscriptionItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription_MessageTypeSubscriptionItem, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messaging_2frequest_2fpayload_2fendpoint_2fsubscription_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Subscription_descriptor_, Subscription::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Subscription_MessageTypeSubscriptionItem_descriptor_, Subscription_MessageTypeSubscriptionItem::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messaging_2frequest_2fpayload_2fendpoint_2fsubscription_2eproto() {
  Subscription_default_instance_.Shutdown();
  delete Subscription_reflection_;
  Subscription_MessageTypeSubscriptionItem_default_instance_.Shutdown();
  delete Subscription_MessageTypeSubscriptionItem_reflection_;
}

void protobuf_InitDefaults_messaging_2frequest_2fpayload_2fendpoint_2fsubscription_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Subscription_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Subscription_MessageTypeSubscriptionItem_default_instance_.DefaultConstruct();
  Subscription_default_instance_.get_mutable()->InitAsDefaultInstance();
  Subscription_MessageTypeSubscriptionItem_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_messaging_2frequest_2fpayload_2fendpoint_2fsubscription_2eproto_once_);
void protobuf_InitDefaults_messaging_2frequest_2fpayload_2fendpoint_2fsubscription_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_messaging_2frequest_2fpayload_2fendpoint_2fsubscription_2eproto_once_,
                 &protobuf_InitDefaults_messaging_2frequest_2fpayload_2fendpoint_2fsubscription_2eproto_impl);
}
void protobuf_AddDesc_messaging_2frequest_2fpayload_2fendpoint_2fsubscription_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_messaging_2frequest_2fpayload_2fendpoint_2fsubscription_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n5messaging/request/payload/endpoint/sub"
    "scription.proto\022#agrirouter.request.payl"
    "oad.endpoint\"\335\001\n\014Subscription\022n\n\027technic"
    "al_message_types\030\001 \003(\0132M.agrirouter.requ"
    "est.payload.endpoint.Subscription.Messag"
    "eTypeSubscriptionItem\032]\n\033MessageTypeSubs"
    "criptionItem\022\036\n\026technical_message_type\030\001"
    " \001(\t\022\014\n\004ddis\030\002 \003(\r\022\020\n\010position\030\003 \001(\010b\006pr"
    "oto3", 324);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messaging/request/payload/endpoint/subscription.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messaging_2frequest_2fpayload_2fendpoint_2fsubscription_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_messaging_2frequest_2fpayload_2fendpoint_2fsubscription_2eproto_once_);
void protobuf_AddDesc_messaging_2frequest_2fpayload_2fendpoint_2fsubscription_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_messaging_2frequest_2fpayload_2fendpoint_2fsubscription_2eproto_once_,
                 &protobuf_AddDesc_messaging_2frequest_2fpayload_2fendpoint_2fsubscription_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messaging_2frequest_2fpayload_2fendpoint_2fsubscription_2eproto {
  StaticDescriptorInitializer_messaging_2frequest_2fpayload_2fendpoint_2fsubscription_2eproto() {
    protobuf_AddDesc_messaging_2frequest_2fpayload_2fendpoint_2fsubscription_2eproto();
  }
} static_descriptor_initializer_messaging_2frequest_2fpayload_2fendpoint_2fsubscription_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Subscription_MessageTypeSubscriptionItem::kTechnicalMessageTypeFieldNumber;
const int Subscription_MessageTypeSubscriptionItem::kDdisFieldNumber;
const int Subscription_MessageTypeSubscriptionItem::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Subscription_MessageTypeSubscriptionItem::Subscription_MessageTypeSubscriptionItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_messaging_2frequest_2fpayload_2fendpoint_2fsubscription_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem)
}

void Subscription_MessageTypeSubscriptionItem::InitAsDefaultInstance() {
}

Subscription_MessageTypeSubscriptionItem::Subscription_MessageTypeSubscriptionItem(const Subscription_MessageTypeSubscriptionItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem)
}

void Subscription_MessageTypeSubscriptionItem::SharedCtor() {
  technical_message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = false;
  _cached_size_ = 0;
}

Subscription_MessageTypeSubscriptionItem::~Subscription_MessageTypeSubscriptionItem() {
  // @@protoc_insertion_point(destructor:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem)
  SharedDtor();
}

void Subscription_MessageTypeSubscriptionItem::SharedDtor() {
  technical_message_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Subscription_MessageTypeSubscriptionItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Subscription_MessageTypeSubscriptionItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Subscription_MessageTypeSubscriptionItem_descriptor_;
}

const Subscription_MessageTypeSubscriptionItem& Subscription_MessageTypeSubscriptionItem::default_instance() {
  protobuf_InitDefaults_messaging_2frequest_2fpayload_2fendpoint_2fsubscription_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Subscription_MessageTypeSubscriptionItem> Subscription_MessageTypeSubscriptionItem_default_instance_;

Subscription_MessageTypeSubscriptionItem* Subscription_MessageTypeSubscriptionItem::New(::google::protobuf::Arena* arena) const {
  Subscription_MessageTypeSubscriptionItem* n = new Subscription_MessageTypeSubscriptionItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Subscription_MessageTypeSubscriptionItem::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem)
  technical_message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = false;
  ddis_.Clear();
}

bool Subscription_MessageTypeSubscriptionItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string technical_message_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_technical_message_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->technical_message_type().data(), this->technical_message_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem.technical_message_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ddis;
        break;
      }

      // repeated uint32 ddis = 2;
      case 2: {
        if (tag == 18) {
         parse_ddis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ddis())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_ddis())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_position;
        break;
      }

      // optional bool position = 3;
      case 3: {
        if (tag == 24) {
         parse_position:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem)
  return false;
#undef DO_
}

void Subscription_MessageTypeSubscriptionItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem)
  // optional string technical_message_type = 1;
  if (this->technical_message_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->technical_message_type().data(), this->technical_message_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem.technical_message_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->technical_message_type(), output);
  }

  // repeated uint32 ddis = 2;
  if (this->ddis_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ddis_cached_byte_size_);
  }
  for (int i = 0; i < this->ddis_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->ddis(i), output);
  }

  // optional bool position = 3;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->position(), output);
  }

  // @@protoc_insertion_point(serialize_end:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem)
}

::google::protobuf::uint8* Subscription_MessageTypeSubscriptionItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem)
  // optional string technical_message_type = 1;
  if (this->technical_message_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->technical_message_type().data(), this->technical_message_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem.technical_message_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->technical_message_type(), target);
  }

  // repeated uint32 ddis = 2;
  if (this->ddis_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ddis_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ddis_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->ddis(i), target);
  }

  // optional bool position = 3;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->position(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem)
  return target;
}

size_t Subscription_MessageTypeSubscriptionItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem)
  size_t total_size = 0;

  // optional string technical_message_type = 1;
  if (this->technical_message_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->technical_message_type());
  }

  // optional bool position = 3;
  if (this->position() != 0) {
    total_size += 1 + 1;
  }

  // repeated uint32 ddis = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->ddis_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ddis(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ddis_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Subscription_MessageTypeSubscriptionItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Subscription_MessageTypeSubscriptionItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Subscription_MessageTypeSubscriptionItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem)
    UnsafeMergeFrom(*source);
  }
}

void Subscription_MessageTypeSubscriptionItem::MergeFrom(const Subscription_MessageTypeSubscriptionItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Subscription_MessageTypeSubscriptionItem::UnsafeMergeFrom(const Subscription_MessageTypeSubscriptionItem& from) {
  GOOGLE_DCHECK(&from != this);
  ddis_.UnsafeMergeFrom(from.ddis_);
  if (from.technical_message_type().size() > 0) {

    technical_message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.technical_message_type_);
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
}

void Subscription_MessageTypeSubscriptionItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Subscription_MessageTypeSubscriptionItem::CopyFrom(const Subscription_MessageTypeSubscriptionItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Subscription_MessageTypeSubscriptionItem::IsInitialized() const {

  return true;
}

void Subscription_MessageTypeSubscriptionItem::Swap(Subscription_MessageTypeSubscriptionItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Subscription_MessageTypeSubscriptionItem::InternalSwap(Subscription_MessageTypeSubscriptionItem* other) {
  technical_message_type_.Swap(&other->technical_message_type_);
  ddis_.UnsafeArenaSwap(&other->ddis_);
  std::swap(position_, other->position_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Subscription_MessageTypeSubscriptionItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Subscription_MessageTypeSubscriptionItem_descriptor_;
  metadata.reflection = Subscription_MessageTypeSubscriptionItem_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Subscription::kTechnicalMessageTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Subscription::Subscription()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_messaging_2frequest_2fpayload_2fendpoint_2fsubscription_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.request.payload.endpoint.Subscription)
}

void Subscription::InitAsDefaultInstance() {
}

Subscription::Subscription(const Subscription& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agrirouter.request.payload.endpoint.Subscription)
}

void Subscription::SharedCtor() {
  _cached_size_ = 0;
}

Subscription::~Subscription() {
  // @@protoc_insertion_point(destructor:agrirouter.request.payload.endpoint.Subscription)
  SharedDtor();
}

void Subscription::SharedDtor() {
}

void Subscription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Subscription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Subscription_descriptor_;
}

const Subscription& Subscription::default_instance() {
  protobuf_InitDefaults_messaging_2frequest_2fpayload_2fendpoint_2fsubscription_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Subscription> Subscription_default_instance_;

Subscription* Subscription::New(::google::protobuf::Arena* arena) const {
  Subscription* n = new Subscription;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Subscription::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.request.payload.endpoint.Subscription)
  technical_message_types_.Clear();
}

bool Subscription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.request.payload.endpoint.Subscription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem technical_message_types = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_technical_message_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_technical_message_types()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_technical_message_types;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.request.payload.endpoint.Subscription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.request.payload.endpoint.Subscription)
  return false;
#undef DO_
}

void Subscription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.request.payload.endpoint.Subscription)
  // repeated .agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem technical_message_types = 1;
  for (unsigned int i = 0, n = this->technical_message_types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->technical_message_types(i), output);
  }

  // @@protoc_insertion_point(serialize_end:agrirouter.request.payload.endpoint.Subscription)
}

::google::protobuf::uint8* Subscription::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.request.payload.endpoint.Subscription)
  // repeated .agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem technical_message_types = 1;
  for (unsigned int i = 0, n = this->technical_message_types_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->technical_message_types(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.request.payload.endpoint.Subscription)
  return target;
}

size_t Subscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.request.payload.endpoint.Subscription)
  size_t total_size = 0;

  // repeated .agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem technical_message_types = 1;
  {
    unsigned int count = this->technical_message_types_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->technical_message_types(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Subscription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.request.payload.endpoint.Subscription)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Subscription* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Subscription>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.request.payload.endpoint.Subscription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.request.payload.endpoint.Subscription)
    UnsafeMergeFrom(*source);
  }
}

void Subscription::MergeFrom(const Subscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.request.payload.endpoint.Subscription)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Subscription::UnsafeMergeFrom(const Subscription& from) {
  GOOGLE_DCHECK(&from != this);
  technical_message_types_.MergeFrom(from.technical_message_types_);
}

void Subscription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.request.payload.endpoint.Subscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Subscription::CopyFrom(const Subscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.request.payload.endpoint.Subscription)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Subscription::IsInitialized() const {

  return true;
}

void Subscription::Swap(Subscription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Subscription::InternalSwap(Subscription* other) {
  technical_message_types_.UnsafeArenaSwap(&other->technical_message_types_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Subscription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Subscription_descriptor_;
  metadata.reflection = Subscription_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Subscription_MessageTypeSubscriptionItem

// optional string technical_message_type = 1;
void Subscription_MessageTypeSubscriptionItem::clear_technical_message_type() {
  technical_message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Subscription_MessageTypeSubscriptionItem::technical_message_type() const {
  // @@protoc_insertion_point(field_get:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem.technical_message_type)
  return technical_message_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Subscription_MessageTypeSubscriptionItem::set_technical_message_type(const ::std::string& value) {
  
  technical_message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem.technical_message_type)
}
void Subscription_MessageTypeSubscriptionItem::set_technical_message_type(const char* value) {
  
  technical_message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem.technical_message_type)
}
void Subscription_MessageTypeSubscriptionItem::set_technical_message_type(const char* value, size_t size) {
  
  technical_message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem.technical_message_type)
}
::std::string* Subscription_MessageTypeSubscriptionItem::mutable_technical_message_type() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem.technical_message_type)
  return technical_message_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Subscription_MessageTypeSubscriptionItem::release_technical_message_type() {
  // @@protoc_insertion_point(field_release:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem.technical_message_type)
  
  return technical_message_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Subscription_MessageTypeSubscriptionItem::set_allocated_technical_message_type(::std::string* technical_message_type) {
  if (technical_message_type != NULL) {
    
  } else {
    
  }
  technical_message_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), technical_message_type);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem.technical_message_type)
}

// repeated uint32 ddis = 2;
int Subscription_MessageTypeSubscriptionItem::ddis_size() const {
  return ddis_.size();
}
void Subscription_MessageTypeSubscriptionItem::clear_ddis() {
  ddis_.Clear();
}
::google::protobuf::uint32 Subscription_MessageTypeSubscriptionItem::ddis(int index) const {
  // @@protoc_insertion_point(field_get:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem.ddis)
  return ddis_.Get(index);
}
void Subscription_MessageTypeSubscriptionItem::set_ddis(int index, ::google::protobuf::uint32 value) {
  ddis_.Set(index, value);
  // @@protoc_insertion_point(field_set:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem.ddis)
}
void Subscription_MessageTypeSubscriptionItem::add_ddis(::google::protobuf::uint32 value) {
  ddis_.Add(value);
  // @@protoc_insertion_point(field_add:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem.ddis)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Subscription_MessageTypeSubscriptionItem::ddis() const {
  // @@protoc_insertion_point(field_list:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem.ddis)
  return ddis_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Subscription_MessageTypeSubscriptionItem::mutable_ddis() {
  // @@protoc_insertion_point(field_mutable_list:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem.ddis)
  return &ddis_;
}

// optional bool position = 3;
void Subscription_MessageTypeSubscriptionItem::clear_position() {
  position_ = false;
}
bool Subscription_MessageTypeSubscriptionItem::position() const {
  // @@protoc_insertion_point(field_get:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem.position)
  return position_;
}
void Subscription_MessageTypeSubscriptionItem::set_position(bool value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem.position)
}

inline const Subscription_MessageTypeSubscriptionItem* Subscription_MessageTypeSubscriptionItem::internal_default_instance() {
  return &Subscription_MessageTypeSubscriptionItem_default_instance_.get();
}
// -------------------------------------------------------------------

// Subscription

// repeated .agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem technical_message_types = 1;
int Subscription::technical_message_types_size() const {
  return technical_message_types_.size();
}
void Subscription::clear_technical_message_types() {
  technical_message_types_.Clear();
}
const ::agrirouter::request::payload::endpoint::Subscription_MessageTypeSubscriptionItem& Subscription::technical_message_types(int index) const {
  // @@protoc_insertion_point(field_get:agrirouter.request.payload.endpoint.Subscription.technical_message_types)
  return technical_message_types_.Get(index);
}
::agrirouter::request::payload::endpoint::Subscription_MessageTypeSubscriptionItem* Subscription::mutable_technical_message_types(int index) {
  // @@protoc_insertion_point(field_mutable:agrirouter.request.payload.endpoint.Subscription.technical_message_types)
  return technical_message_types_.Mutable(index);
}
::agrirouter::request::payload::endpoint::Subscription_MessageTypeSubscriptionItem* Subscription::add_technical_message_types() {
  // @@protoc_insertion_point(field_add:agrirouter.request.payload.endpoint.Subscription.technical_message_types)
  return technical_message_types_.Add();
}
::google::protobuf::RepeatedPtrField< ::agrirouter::request::payload::endpoint::Subscription_MessageTypeSubscriptionItem >*
Subscription::mutable_technical_message_types() {
  // @@protoc_insertion_point(field_mutable_list:agrirouter.request.payload.endpoint.Subscription.technical_message_types)
  return &technical_message_types_;
}
const ::google::protobuf::RepeatedPtrField< ::agrirouter::request::payload::endpoint::Subscription_MessageTypeSubscriptionItem >&
Subscription::technical_message_types() const {
  // @@protoc_insertion_point(field_list:agrirouter.request.payload.endpoint.Subscription.technical_message_types)
  return technical_message_types_;
}

inline const Subscription* Subscription::internal_default_instance() {
  return &Subscription_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace endpoint
}  // namespace payload
}  // namespace request
}  // namespace agrirouter

// @@protoc_insertion_point(global_scope)
