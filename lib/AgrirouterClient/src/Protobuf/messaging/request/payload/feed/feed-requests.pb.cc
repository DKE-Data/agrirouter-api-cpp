// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messaging/request/payload/feed/feed-requests.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messaging/request/payload/feed/feed-requests.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace agrirouter {
namespace feed {
namespace request {

namespace {

const ::google::protobuf::Descriptor* ValidityPeriod_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ValidityPeriod_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageConfirm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageConfirm_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageDelete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageDelete_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messaging_2frequest_2fpayload_2ffeed_2ffeed_2drequests_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_messaging_2frequest_2fpayload_2ffeed_2ffeed_2drequests_2eproto() {
  protobuf_AddDesc_messaging_2frequest_2fpayload_2ffeed_2ffeed_2drequests_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messaging/request/payload/feed/feed-requests.proto");
  GOOGLE_CHECK(file != NULL);
  ValidityPeriod_descriptor_ = file->message_type(0);
  static const int ValidityPeriod_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidityPeriod, sentfrom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidityPeriod, sentto_),
  };
  ValidityPeriod_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ValidityPeriod_descriptor_,
      ValidityPeriod::internal_default_instance(),
      ValidityPeriod_offsets_,
      -1,
      -1,
      -1,
      sizeof(ValidityPeriod),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidityPeriod, _internal_metadata_));
  MessageQuery_descriptor_ = file->message_type(1);
  static const int MessageQuery_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageQuery, message_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageQuery, senders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageQuery, validity_period_),
  };
  MessageQuery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageQuery_descriptor_,
      MessageQuery::internal_default_instance(),
      MessageQuery_offsets_,
      -1,
      -1,
      -1,
      sizeof(MessageQuery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageQuery, _internal_metadata_));
  MessageConfirm_descriptor_ = file->message_type(2);
  static const int MessageConfirm_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageConfirm, message_ids_),
  };
  MessageConfirm_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageConfirm_descriptor_,
      MessageConfirm::internal_default_instance(),
      MessageConfirm_offsets_,
      -1,
      -1,
      -1,
      sizeof(MessageConfirm),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageConfirm, _internal_metadata_));
  MessageDelete_descriptor_ = file->message_type(3);
  static const int MessageDelete_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDelete, message_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDelete, senders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDelete, validity_period_),
  };
  MessageDelete_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageDelete_descriptor_,
      MessageDelete::internal_default_instance(),
      MessageDelete_offsets_,
      -1,
      -1,
      -1,
      sizeof(MessageDelete),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDelete, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messaging_2frequest_2fpayload_2ffeed_2ffeed_2drequests_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ValidityPeriod_descriptor_, ValidityPeriod::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageQuery_descriptor_, MessageQuery::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageConfirm_descriptor_, MessageConfirm::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageDelete_descriptor_, MessageDelete::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messaging_2frequest_2fpayload_2ffeed_2ffeed_2drequests_2eproto() {
  ValidityPeriod_default_instance_.Shutdown();
  delete ValidityPeriod_reflection_;
  MessageQuery_default_instance_.Shutdown();
  delete MessageQuery_reflection_;
  MessageConfirm_default_instance_.Shutdown();
  delete MessageConfirm_reflection_;
  MessageDelete_default_instance_.Shutdown();
  delete MessageDelete_reflection_;
}

void protobuf_InitDefaults_messaging_2frequest_2fpayload_2ffeed_2ffeed_2drequests_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2ftimestamp_2eproto();
  ValidityPeriod_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MessageQuery_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MessageConfirm_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MessageDelete_default_instance_.DefaultConstruct();
  ValidityPeriod_default_instance_.get_mutable()->InitAsDefaultInstance();
  MessageQuery_default_instance_.get_mutable()->InitAsDefaultInstance();
  MessageConfirm_default_instance_.get_mutable()->InitAsDefaultInstance();
  MessageDelete_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_messaging_2frequest_2fpayload_2ffeed_2ffeed_2drequests_2eproto_once_);
void protobuf_InitDefaults_messaging_2frequest_2fpayload_2ffeed_2ffeed_2drequests_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_messaging_2frequest_2fpayload_2ffeed_2ffeed_2drequests_2eproto_once_,
                 &protobuf_InitDefaults_messaging_2frequest_2fpayload_2ffeed_2ffeed_2drequests_2eproto_impl);
}
void protobuf_AddDesc_messaging_2frequest_2fpayload_2ffeed_2ffeed_2drequests_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_messaging_2frequest_2fpayload_2ffeed_2ffeed_2drequests_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n2messaging/request/payload/feed/feed-re"
    "quests.proto\022\027agrirouter.feed.request\032\037g"
    "oogle/protobuf/timestamp.proto\"j\n\016Validi"
    "tyPeriod\022,\n\010sentFrom\030\001 \001(\0132\032.google.prot"
    "obuf.Timestamp\022*\n\006sentTo\030\002 \001(\0132\032.google."
    "protobuf.Timestamp\"v\n\014MessageQuery\022\023\n\013me"
    "ssage_ids\030\001 \003(\t\022\017\n\007senders\030\002 \003(\t\022@\n\017vali"
    "dity_period\030\003 \001(\0132\'.agrirouter.feed.requ"
    "est.ValidityPeriod\"%\n\016MessageConfirm\022\023\n\013"
    "message_ids\030\001 \003(\t\"w\n\rMessageDelete\022\023\n\013me"
    "ssage_ids\030\001 \003(\t\022\017\n\007senders\030\002 \003(\t\022@\n\017vali"
    "dity_period\030\003 \001(\0132\'.agrirouter.feed.requ"
    "est.ValidityPeriodb\006proto3", 506);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messaging/request/payload/feed/feed-requests.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messaging_2frequest_2fpayload_2ffeed_2ffeed_2drequests_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_messaging_2frequest_2fpayload_2ffeed_2ffeed_2drequests_2eproto_once_);
void protobuf_AddDesc_messaging_2frequest_2fpayload_2ffeed_2ffeed_2drequests_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_messaging_2frequest_2fpayload_2ffeed_2ffeed_2drequests_2eproto_once_,
                 &protobuf_AddDesc_messaging_2frequest_2fpayload_2ffeed_2ffeed_2drequests_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messaging_2frequest_2fpayload_2ffeed_2ffeed_2drequests_2eproto {
  StaticDescriptorInitializer_messaging_2frequest_2fpayload_2ffeed_2ffeed_2drequests_2eproto() {
    protobuf_AddDesc_messaging_2frequest_2fpayload_2ffeed_2ffeed_2drequests_2eproto();
  }
} static_descriptor_initializer_messaging_2frequest_2fpayload_2ffeed_2ffeed_2drequests_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ValidityPeriod::kSentFromFieldNumber;
const int ValidityPeriod::kSentToFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ValidityPeriod::ValidityPeriod()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_messaging_2frequest_2fpayload_2ffeed_2ffeed_2drequests_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.feed.request.ValidityPeriod)
}

void ValidityPeriod::InitAsDefaultInstance() {
  sentfrom_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  sentto_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}

ValidityPeriod::ValidityPeriod(const ValidityPeriod& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agrirouter.feed.request.ValidityPeriod)
}

void ValidityPeriod::SharedCtor() {
  sentfrom_ = NULL;
  sentto_ = NULL;
  _cached_size_ = 0;
}

ValidityPeriod::~ValidityPeriod() {
  // @@protoc_insertion_point(destructor:agrirouter.feed.request.ValidityPeriod)
  SharedDtor();
}

void ValidityPeriod::SharedDtor() {
  if (this != &ValidityPeriod_default_instance_.get()) {
    delete sentfrom_;
    delete sentto_;
  }
}

void ValidityPeriod::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ValidityPeriod::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ValidityPeriod_descriptor_;
}

const ValidityPeriod& ValidityPeriod::default_instance() {
  protobuf_InitDefaults_messaging_2frequest_2fpayload_2ffeed_2ffeed_2drequests_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ValidityPeriod> ValidityPeriod_default_instance_;

ValidityPeriod* ValidityPeriod::New(::google::protobuf::Arena* arena) const {
  ValidityPeriod* n = new ValidityPeriod;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ValidityPeriod::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.feed.request.ValidityPeriod)
  if (GetArenaNoVirtual() == NULL && sentfrom_ != NULL) delete sentfrom_;
  sentfrom_ = NULL;
  if (GetArenaNoVirtual() == NULL && sentto_ != NULL) delete sentto_;
  sentto_ = NULL;
}

bool ValidityPeriod::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.feed.request.ValidityPeriod)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.protobuf.Timestamp sentFrom = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sentfrom()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sentTo;
        break;
      }

      // optional .google.protobuf.Timestamp sentTo = 2;
      case 2: {
        if (tag == 18) {
         parse_sentTo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sentto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.feed.request.ValidityPeriod)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.feed.request.ValidityPeriod)
  return false;
#undef DO_
}

void ValidityPeriod::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.feed.request.ValidityPeriod)
  // optional .google.protobuf.Timestamp sentFrom = 1;
  if (this->has_sentfrom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sentfrom_, output);
  }

  // optional .google.protobuf.Timestamp sentTo = 2;
  if (this->has_sentto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sentto_, output);
  }

  // @@protoc_insertion_point(serialize_end:agrirouter.feed.request.ValidityPeriod)
}

::google::protobuf::uint8* ValidityPeriod::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.feed.request.ValidityPeriod)
  // optional .google.protobuf.Timestamp sentFrom = 1;
  if (this->has_sentfrom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->sentfrom_, false, target);
  }

  // optional .google.protobuf.Timestamp sentTo = 2;
  if (this->has_sentto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->sentto_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.feed.request.ValidityPeriod)
  return target;
}

size_t ValidityPeriod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.feed.request.ValidityPeriod)
  size_t total_size = 0;

  // optional .google.protobuf.Timestamp sentFrom = 1;
  if (this->has_sentfrom()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sentfrom_);
  }

  // optional .google.protobuf.Timestamp sentTo = 2;
  if (this->has_sentto()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sentto_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ValidityPeriod::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.feed.request.ValidityPeriod)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ValidityPeriod* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ValidityPeriod>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.feed.request.ValidityPeriod)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.feed.request.ValidityPeriod)
    UnsafeMergeFrom(*source);
  }
}

void ValidityPeriod::MergeFrom(const ValidityPeriod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.feed.request.ValidityPeriod)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ValidityPeriod::UnsafeMergeFrom(const ValidityPeriod& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_sentfrom()) {
    mutable_sentfrom()->::google::protobuf::Timestamp::MergeFrom(from.sentfrom());
  }
  if (from.has_sentto()) {
    mutable_sentto()->::google::protobuf::Timestamp::MergeFrom(from.sentto());
  }
}

void ValidityPeriod::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.feed.request.ValidityPeriod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidityPeriod::CopyFrom(const ValidityPeriod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.feed.request.ValidityPeriod)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ValidityPeriod::IsInitialized() const {

  return true;
}

void ValidityPeriod::Swap(ValidityPeriod* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ValidityPeriod::InternalSwap(ValidityPeriod* other) {
  std::swap(sentfrom_, other->sentfrom_);
  std::swap(sentto_, other->sentto_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ValidityPeriod::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ValidityPeriod_descriptor_;
  metadata.reflection = ValidityPeriod_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ValidityPeriod

// optional .google.protobuf.Timestamp sentFrom = 1;
bool ValidityPeriod::has_sentfrom() const {
  return this != internal_default_instance() && sentfrom_ != NULL;
}
void ValidityPeriod::clear_sentfrom() {
  if (GetArenaNoVirtual() == NULL && sentfrom_ != NULL) delete sentfrom_;
  sentfrom_ = NULL;
}
const ::google::protobuf::Timestamp& ValidityPeriod::sentfrom() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.request.ValidityPeriod.sentFrom)
  return sentfrom_ != NULL ? *sentfrom_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* ValidityPeriod::mutable_sentfrom() {
  
  if (sentfrom_ == NULL) {
    sentfrom_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.request.ValidityPeriod.sentFrom)
  return sentfrom_;
}
::google::protobuf::Timestamp* ValidityPeriod::release_sentfrom() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.request.ValidityPeriod.sentFrom)
  
  ::google::protobuf::Timestamp* temp = sentfrom_;
  sentfrom_ = NULL;
  return temp;
}
void ValidityPeriod::set_allocated_sentfrom(::google::protobuf::Timestamp* sentfrom) {
  delete sentfrom_;
  if (sentfrom != NULL && sentfrom->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_sentfrom = new ::google::protobuf::Timestamp;
    new_sentfrom->CopyFrom(*sentfrom);
    sentfrom = new_sentfrom;
  }
  sentfrom_ = sentfrom;
  if (sentfrom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.request.ValidityPeriod.sentFrom)
}

// optional .google.protobuf.Timestamp sentTo = 2;
bool ValidityPeriod::has_sentto() const {
  return this != internal_default_instance() && sentto_ != NULL;
}
void ValidityPeriod::clear_sentto() {
  if (GetArenaNoVirtual() == NULL && sentto_ != NULL) delete sentto_;
  sentto_ = NULL;
}
const ::google::protobuf::Timestamp& ValidityPeriod::sentto() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.request.ValidityPeriod.sentTo)
  return sentto_ != NULL ? *sentto_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* ValidityPeriod::mutable_sentto() {
  
  if (sentto_ == NULL) {
    sentto_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.request.ValidityPeriod.sentTo)
  return sentto_;
}
::google::protobuf::Timestamp* ValidityPeriod::release_sentto() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.request.ValidityPeriod.sentTo)
  
  ::google::protobuf::Timestamp* temp = sentto_;
  sentto_ = NULL;
  return temp;
}
void ValidityPeriod::set_allocated_sentto(::google::protobuf::Timestamp* sentto) {
  delete sentto_;
  if (sentto != NULL && sentto->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_sentto = new ::google::protobuf::Timestamp;
    new_sentto->CopyFrom(*sentto);
    sentto = new_sentto;
  }
  sentto_ = sentto;
  if (sentto) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.request.ValidityPeriod.sentTo)
}

inline const ValidityPeriod* ValidityPeriod::internal_default_instance() {
  return &ValidityPeriod_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageQuery::kMessageIdsFieldNumber;
const int MessageQuery::kSendersFieldNumber;
const int MessageQuery::kValidityPeriodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageQuery::MessageQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_messaging_2frequest_2fpayload_2ffeed_2ffeed_2drequests_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.feed.request.MessageQuery)
}

void MessageQuery::InitAsDefaultInstance() {
  validity_period_ = const_cast< ::agrirouter::feed::request::ValidityPeriod*>(
      ::agrirouter::feed::request::ValidityPeriod::internal_default_instance());
}

MessageQuery::MessageQuery(const MessageQuery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agrirouter.feed.request.MessageQuery)
}

void MessageQuery::SharedCtor() {
  validity_period_ = NULL;
  _cached_size_ = 0;
}

MessageQuery::~MessageQuery() {
  // @@protoc_insertion_point(destructor:agrirouter.feed.request.MessageQuery)
  SharedDtor();
}

void MessageQuery::SharedDtor() {
  if (this != &MessageQuery_default_instance_.get()) {
    delete validity_period_;
  }
}

void MessageQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageQuery_descriptor_;
}

const MessageQuery& MessageQuery::default_instance() {
  protobuf_InitDefaults_messaging_2frequest_2fpayload_2ffeed_2ffeed_2drequests_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MessageQuery> MessageQuery_default_instance_;

MessageQuery* MessageQuery::New(::google::protobuf::Arena* arena) const {
  MessageQuery* n = new MessageQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.feed.request.MessageQuery)
  if (GetArenaNoVirtual() == NULL && validity_period_ != NULL) delete validity_period_;
  validity_period_ = NULL;
  message_ids_.Clear();
  senders_.Clear();
}

bool MessageQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.feed.request.MessageQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string message_ids = 1;
      case 1: {
        if (tag == 10) {
         parse_message_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_message_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message_ids(this->message_ids_size() - 1).data(),
            this->message_ids(this->message_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.request.MessageQuery.message_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_message_ids;
        if (input->ExpectTag(18)) goto parse_senders;
        break;
      }

      // repeated string senders = 2;
      case 2: {
        if (tag == 18) {
         parse_senders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_senders()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->senders(this->senders_size() - 1).data(),
            this->senders(this->senders_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.request.MessageQuery.senders"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_senders;
        if (input->ExpectTag(26)) goto parse_validity_period;
        break;
      }

      // optional .agrirouter.feed.request.ValidityPeriod validity_period = 3;
      case 3: {
        if (tag == 26) {
         parse_validity_period:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_validity_period()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.feed.request.MessageQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.feed.request.MessageQuery)
  return false;
#undef DO_
}

void MessageQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.feed.request.MessageQuery)
  // repeated string message_ids = 1;
  for (int i = 0; i < this->message_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_ids(i).data(), this->message_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.request.MessageQuery.message_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message_ids(i), output);
  }

  // repeated string senders = 2;
  for (int i = 0; i < this->senders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->senders(i).data(), this->senders(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.request.MessageQuery.senders");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->senders(i), output);
  }

  // optional .agrirouter.feed.request.ValidityPeriod validity_period = 3;
  if (this->has_validity_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->validity_period_, output);
  }

  // @@protoc_insertion_point(serialize_end:agrirouter.feed.request.MessageQuery)
}

::google::protobuf::uint8* MessageQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.feed.request.MessageQuery)
  // repeated string message_ids = 1;
  for (int i = 0; i < this->message_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_ids(i).data(), this->message_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.request.MessageQuery.message_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->message_ids(i), target);
  }

  // repeated string senders = 2;
  for (int i = 0; i < this->senders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->senders(i).data(), this->senders(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.request.MessageQuery.senders");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->senders(i), target);
  }

  // optional .agrirouter.feed.request.ValidityPeriod validity_period = 3;
  if (this->has_validity_period()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->validity_period_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.feed.request.MessageQuery)
  return target;
}

size_t MessageQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.feed.request.MessageQuery)
  size_t total_size = 0;

  // optional .agrirouter.feed.request.ValidityPeriod validity_period = 3;
  if (this->has_validity_period()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->validity_period_);
  }

  // repeated string message_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->message_ids_size());
  for (int i = 0; i < this->message_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->message_ids(i));
  }

  // repeated string senders = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->senders_size());
  for (int i = 0; i < this->senders_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->senders(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.feed.request.MessageQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MessageQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.feed.request.MessageQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.feed.request.MessageQuery)
    UnsafeMergeFrom(*source);
  }
}

void MessageQuery::MergeFrom(const MessageQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.feed.request.MessageQuery)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MessageQuery::UnsafeMergeFrom(const MessageQuery& from) {
  GOOGLE_DCHECK(&from != this);
  message_ids_.UnsafeMergeFrom(from.message_ids_);
  senders_.UnsafeMergeFrom(from.senders_);
  if (from.has_validity_period()) {
    mutable_validity_period()->::agrirouter::feed::request::ValidityPeriod::MergeFrom(from.validity_period());
  }
}

void MessageQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.feed.request.MessageQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageQuery::CopyFrom(const MessageQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.feed.request.MessageQuery)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MessageQuery::IsInitialized() const {

  return true;
}

void MessageQuery::Swap(MessageQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageQuery::InternalSwap(MessageQuery* other) {
  message_ids_.UnsafeArenaSwap(&other->message_ids_);
  senders_.UnsafeArenaSwap(&other->senders_);
  std::swap(validity_period_, other->validity_period_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageQuery_descriptor_;
  metadata.reflection = MessageQuery_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageQuery

// repeated string message_ids = 1;
int MessageQuery::message_ids_size() const {
  return message_ids_.size();
}
void MessageQuery::clear_message_ids() {
  message_ids_.Clear();
}
const ::std::string& MessageQuery::message_ids(int index) const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.request.MessageQuery.message_ids)
  return message_ids_.Get(index);
}
::std::string* MessageQuery::mutable_message_ids(int index) {
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.request.MessageQuery.message_ids)
  return message_ids_.Mutable(index);
}
void MessageQuery::set_message_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:agrirouter.feed.request.MessageQuery.message_ids)
  message_ids_.Mutable(index)->assign(value);
}
void MessageQuery::set_message_ids(int index, const char* value) {
  message_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.request.MessageQuery.message_ids)
}
void MessageQuery::set_message_ids(int index, const char* value, size_t size) {
  message_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.request.MessageQuery.message_ids)
}
::std::string* MessageQuery::add_message_ids() {
  // @@protoc_insertion_point(field_add_mutable:agrirouter.feed.request.MessageQuery.message_ids)
  return message_ids_.Add();
}
void MessageQuery::add_message_ids(const ::std::string& value) {
  message_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:agrirouter.feed.request.MessageQuery.message_ids)
}
void MessageQuery::add_message_ids(const char* value) {
  message_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:agrirouter.feed.request.MessageQuery.message_ids)
}
void MessageQuery::add_message_ids(const char* value, size_t size) {
  message_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:agrirouter.feed.request.MessageQuery.message_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
MessageQuery::message_ids() const {
  // @@protoc_insertion_point(field_list:agrirouter.feed.request.MessageQuery.message_ids)
  return message_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
MessageQuery::mutable_message_ids() {
  // @@protoc_insertion_point(field_mutable_list:agrirouter.feed.request.MessageQuery.message_ids)
  return &message_ids_;
}

// repeated string senders = 2;
int MessageQuery::senders_size() const {
  return senders_.size();
}
void MessageQuery::clear_senders() {
  senders_.Clear();
}
const ::std::string& MessageQuery::senders(int index) const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.request.MessageQuery.senders)
  return senders_.Get(index);
}
::std::string* MessageQuery::mutable_senders(int index) {
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.request.MessageQuery.senders)
  return senders_.Mutable(index);
}
void MessageQuery::set_senders(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:agrirouter.feed.request.MessageQuery.senders)
  senders_.Mutable(index)->assign(value);
}
void MessageQuery::set_senders(int index, const char* value) {
  senders_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.request.MessageQuery.senders)
}
void MessageQuery::set_senders(int index, const char* value, size_t size) {
  senders_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.request.MessageQuery.senders)
}
::std::string* MessageQuery::add_senders() {
  // @@protoc_insertion_point(field_add_mutable:agrirouter.feed.request.MessageQuery.senders)
  return senders_.Add();
}
void MessageQuery::add_senders(const ::std::string& value) {
  senders_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:agrirouter.feed.request.MessageQuery.senders)
}
void MessageQuery::add_senders(const char* value) {
  senders_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:agrirouter.feed.request.MessageQuery.senders)
}
void MessageQuery::add_senders(const char* value, size_t size) {
  senders_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:agrirouter.feed.request.MessageQuery.senders)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
MessageQuery::senders() const {
  // @@protoc_insertion_point(field_list:agrirouter.feed.request.MessageQuery.senders)
  return senders_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
MessageQuery::mutable_senders() {
  // @@protoc_insertion_point(field_mutable_list:agrirouter.feed.request.MessageQuery.senders)
  return &senders_;
}

// optional .agrirouter.feed.request.ValidityPeriod validity_period = 3;
bool MessageQuery::has_validity_period() const {
  return this != internal_default_instance() && validity_period_ != NULL;
}
void MessageQuery::clear_validity_period() {
  if (GetArenaNoVirtual() == NULL && validity_period_ != NULL) delete validity_period_;
  validity_period_ = NULL;
}
const ::agrirouter::feed::request::ValidityPeriod& MessageQuery::validity_period() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.request.MessageQuery.validity_period)
  return validity_period_ != NULL ? *validity_period_
                         : *::agrirouter::feed::request::ValidityPeriod::internal_default_instance();
}
::agrirouter::feed::request::ValidityPeriod* MessageQuery::mutable_validity_period() {
  
  if (validity_period_ == NULL) {
    validity_period_ = new ::agrirouter::feed::request::ValidityPeriod;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.request.MessageQuery.validity_period)
  return validity_period_;
}
::agrirouter::feed::request::ValidityPeriod* MessageQuery::release_validity_period() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.request.MessageQuery.validity_period)
  
  ::agrirouter::feed::request::ValidityPeriod* temp = validity_period_;
  validity_period_ = NULL;
  return temp;
}
void MessageQuery::set_allocated_validity_period(::agrirouter::feed::request::ValidityPeriod* validity_period) {
  delete validity_period_;
  validity_period_ = validity_period;
  if (validity_period) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.request.MessageQuery.validity_period)
}

inline const MessageQuery* MessageQuery::internal_default_instance() {
  return &MessageQuery_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageConfirm::kMessageIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageConfirm::MessageConfirm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_messaging_2frequest_2fpayload_2ffeed_2ffeed_2drequests_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.feed.request.MessageConfirm)
}

void MessageConfirm::InitAsDefaultInstance() {
}

MessageConfirm::MessageConfirm(const MessageConfirm& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agrirouter.feed.request.MessageConfirm)
}

void MessageConfirm::SharedCtor() {
  _cached_size_ = 0;
}

MessageConfirm::~MessageConfirm() {
  // @@protoc_insertion_point(destructor:agrirouter.feed.request.MessageConfirm)
  SharedDtor();
}

void MessageConfirm::SharedDtor() {
}

void MessageConfirm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageConfirm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageConfirm_descriptor_;
}

const MessageConfirm& MessageConfirm::default_instance() {
  protobuf_InitDefaults_messaging_2frequest_2fpayload_2ffeed_2ffeed_2drequests_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MessageConfirm> MessageConfirm_default_instance_;

MessageConfirm* MessageConfirm::New(::google::protobuf::Arena* arena) const {
  MessageConfirm* n = new MessageConfirm;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageConfirm::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.feed.request.MessageConfirm)
  message_ids_.Clear();
}

bool MessageConfirm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.feed.request.MessageConfirm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string message_ids = 1;
      case 1: {
        if (tag == 10) {
         parse_message_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_message_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message_ids(this->message_ids_size() - 1).data(),
            this->message_ids(this->message_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.request.MessageConfirm.message_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_message_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.feed.request.MessageConfirm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.feed.request.MessageConfirm)
  return false;
#undef DO_
}

void MessageConfirm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.feed.request.MessageConfirm)
  // repeated string message_ids = 1;
  for (int i = 0; i < this->message_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_ids(i).data(), this->message_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.request.MessageConfirm.message_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:agrirouter.feed.request.MessageConfirm)
}

::google::protobuf::uint8* MessageConfirm::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.feed.request.MessageConfirm)
  // repeated string message_ids = 1;
  for (int i = 0; i < this->message_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_ids(i).data(), this->message_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.request.MessageConfirm.message_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->message_ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.feed.request.MessageConfirm)
  return target;
}

size_t MessageConfirm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.feed.request.MessageConfirm)
  size_t total_size = 0;

  // repeated string message_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->message_ids_size());
  for (int i = 0; i < this->message_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->message_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageConfirm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.feed.request.MessageConfirm)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MessageConfirm* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageConfirm>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.feed.request.MessageConfirm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.feed.request.MessageConfirm)
    UnsafeMergeFrom(*source);
  }
}

void MessageConfirm::MergeFrom(const MessageConfirm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.feed.request.MessageConfirm)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MessageConfirm::UnsafeMergeFrom(const MessageConfirm& from) {
  GOOGLE_DCHECK(&from != this);
  message_ids_.UnsafeMergeFrom(from.message_ids_);
}

void MessageConfirm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.feed.request.MessageConfirm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageConfirm::CopyFrom(const MessageConfirm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.feed.request.MessageConfirm)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MessageConfirm::IsInitialized() const {

  return true;
}

void MessageConfirm::Swap(MessageConfirm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageConfirm::InternalSwap(MessageConfirm* other) {
  message_ids_.UnsafeArenaSwap(&other->message_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageConfirm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageConfirm_descriptor_;
  metadata.reflection = MessageConfirm_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageConfirm

// repeated string message_ids = 1;
int MessageConfirm::message_ids_size() const {
  return message_ids_.size();
}
void MessageConfirm::clear_message_ids() {
  message_ids_.Clear();
}
const ::std::string& MessageConfirm::message_ids(int index) const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.request.MessageConfirm.message_ids)
  return message_ids_.Get(index);
}
::std::string* MessageConfirm::mutable_message_ids(int index) {
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.request.MessageConfirm.message_ids)
  return message_ids_.Mutable(index);
}
void MessageConfirm::set_message_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:agrirouter.feed.request.MessageConfirm.message_ids)
  message_ids_.Mutable(index)->assign(value);
}
void MessageConfirm::set_message_ids(int index, const char* value) {
  message_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.request.MessageConfirm.message_ids)
}
void MessageConfirm::set_message_ids(int index, const char* value, size_t size) {
  message_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.request.MessageConfirm.message_ids)
}
::std::string* MessageConfirm::add_message_ids() {
  // @@protoc_insertion_point(field_add_mutable:agrirouter.feed.request.MessageConfirm.message_ids)
  return message_ids_.Add();
}
void MessageConfirm::add_message_ids(const ::std::string& value) {
  message_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:agrirouter.feed.request.MessageConfirm.message_ids)
}
void MessageConfirm::add_message_ids(const char* value) {
  message_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:agrirouter.feed.request.MessageConfirm.message_ids)
}
void MessageConfirm::add_message_ids(const char* value, size_t size) {
  message_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:agrirouter.feed.request.MessageConfirm.message_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
MessageConfirm::message_ids() const {
  // @@protoc_insertion_point(field_list:agrirouter.feed.request.MessageConfirm.message_ids)
  return message_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
MessageConfirm::mutable_message_ids() {
  // @@protoc_insertion_point(field_mutable_list:agrirouter.feed.request.MessageConfirm.message_ids)
  return &message_ids_;
}

inline const MessageConfirm* MessageConfirm::internal_default_instance() {
  return &MessageConfirm_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageDelete::kMessageIdsFieldNumber;
const int MessageDelete::kSendersFieldNumber;
const int MessageDelete::kValidityPeriodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageDelete::MessageDelete()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_messaging_2frequest_2fpayload_2ffeed_2ffeed_2drequests_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.feed.request.MessageDelete)
}

void MessageDelete::InitAsDefaultInstance() {
  validity_period_ = const_cast< ::agrirouter::feed::request::ValidityPeriod*>(
      ::agrirouter::feed::request::ValidityPeriod::internal_default_instance());
}

MessageDelete::MessageDelete(const MessageDelete& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agrirouter.feed.request.MessageDelete)
}

void MessageDelete::SharedCtor() {
  validity_period_ = NULL;
  _cached_size_ = 0;
}

MessageDelete::~MessageDelete() {
  // @@protoc_insertion_point(destructor:agrirouter.feed.request.MessageDelete)
  SharedDtor();
}

void MessageDelete::SharedDtor() {
  if (this != &MessageDelete_default_instance_.get()) {
    delete validity_period_;
  }
}

void MessageDelete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageDelete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageDelete_descriptor_;
}

const MessageDelete& MessageDelete::default_instance() {
  protobuf_InitDefaults_messaging_2frequest_2fpayload_2ffeed_2ffeed_2drequests_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MessageDelete> MessageDelete_default_instance_;

MessageDelete* MessageDelete::New(::google::protobuf::Arena* arena) const {
  MessageDelete* n = new MessageDelete;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageDelete::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.feed.request.MessageDelete)
  if (GetArenaNoVirtual() == NULL && validity_period_ != NULL) delete validity_period_;
  validity_period_ = NULL;
  message_ids_.Clear();
  senders_.Clear();
}

bool MessageDelete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.feed.request.MessageDelete)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string message_ids = 1;
      case 1: {
        if (tag == 10) {
         parse_message_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_message_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message_ids(this->message_ids_size() - 1).data(),
            this->message_ids(this->message_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.request.MessageDelete.message_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_message_ids;
        if (input->ExpectTag(18)) goto parse_senders;
        break;
      }

      // repeated string senders = 2;
      case 2: {
        if (tag == 18) {
         parse_senders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_senders()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->senders(this->senders_size() - 1).data(),
            this->senders(this->senders_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.request.MessageDelete.senders"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_senders;
        if (input->ExpectTag(26)) goto parse_validity_period;
        break;
      }

      // optional .agrirouter.feed.request.ValidityPeriod validity_period = 3;
      case 3: {
        if (tag == 26) {
         parse_validity_period:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_validity_period()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.feed.request.MessageDelete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.feed.request.MessageDelete)
  return false;
#undef DO_
}

void MessageDelete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.feed.request.MessageDelete)
  // repeated string message_ids = 1;
  for (int i = 0; i < this->message_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_ids(i).data(), this->message_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.request.MessageDelete.message_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message_ids(i), output);
  }

  // repeated string senders = 2;
  for (int i = 0; i < this->senders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->senders(i).data(), this->senders(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.request.MessageDelete.senders");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->senders(i), output);
  }

  // optional .agrirouter.feed.request.ValidityPeriod validity_period = 3;
  if (this->has_validity_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->validity_period_, output);
  }

  // @@protoc_insertion_point(serialize_end:agrirouter.feed.request.MessageDelete)
}

::google::protobuf::uint8* MessageDelete::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.feed.request.MessageDelete)
  // repeated string message_ids = 1;
  for (int i = 0; i < this->message_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_ids(i).data(), this->message_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.request.MessageDelete.message_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->message_ids(i), target);
  }

  // repeated string senders = 2;
  for (int i = 0; i < this->senders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->senders(i).data(), this->senders(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.request.MessageDelete.senders");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->senders(i), target);
  }

  // optional .agrirouter.feed.request.ValidityPeriod validity_period = 3;
  if (this->has_validity_period()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->validity_period_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.feed.request.MessageDelete)
  return target;
}

size_t MessageDelete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.feed.request.MessageDelete)
  size_t total_size = 0;

  // optional .agrirouter.feed.request.ValidityPeriod validity_period = 3;
  if (this->has_validity_period()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->validity_period_);
  }

  // repeated string message_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->message_ids_size());
  for (int i = 0; i < this->message_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->message_ids(i));
  }

  // repeated string senders = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->senders_size());
  for (int i = 0; i < this->senders_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->senders(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageDelete::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.feed.request.MessageDelete)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MessageDelete* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageDelete>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.feed.request.MessageDelete)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.feed.request.MessageDelete)
    UnsafeMergeFrom(*source);
  }
}

void MessageDelete::MergeFrom(const MessageDelete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.feed.request.MessageDelete)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MessageDelete::UnsafeMergeFrom(const MessageDelete& from) {
  GOOGLE_DCHECK(&from != this);
  message_ids_.UnsafeMergeFrom(from.message_ids_);
  senders_.UnsafeMergeFrom(from.senders_);
  if (from.has_validity_period()) {
    mutable_validity_period()->::agrirouter::feed::request::ValidityPeriod::MergeFrom(from.validity_period());
  }
}

void MessageDelete::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.feed.request.MessageDelete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageDelete::CopyFrom(const MessageDelete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.feed.request.MessageDelete)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MessageDelete::IsInitialized() const {

  return true;
}

void MessageDelete::Swap(MessageDelete* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageDelete::InternalSwap(MessageDelete* other) {
  message_ids_.UnsafeArenaSwap(&other->message_ids_);
  senders_.UnsafeArenaSwap(&other->senders_);
  std::swap(validity_period_, other->validity_period_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageDelete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageDelete_descriptor_;
  metadata.reflection = MessageDelete_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageDelete

// repeated string message_ids = 1;
int MessageDelete::message_ids_size() const {
  return message_ids_.size();
}
void MessageDelete::clear_message_ids() {
  message_ids_.Clear();
}
const ::std::string& MessageDelete::message_ids(int index) const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.request.MessageDelete.message_ids)
  return message_ids_.Get(index);
}
::std::string* MessageDelete::mutable_message_ids(int index) {
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.request.MessageDelete.message_ids)
  return message_ids_.Mutable(index);
}
void MessageDelete::set_message_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:agrirouter.feed.request.MessageDelete.message_ids)
  message_ids_.Mutable(index)->assign(value);
}
void MessageDelete::set_message_ids(int index, const char* value) {
  message_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.request.MessageDelete.message_ids)
}
void MessageDelete::set_message_ids(int index, const char* value, size_t size) {
  message_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.request.MessageDelete.message_ids)
}
::std::string* MessageDelete::add_message_ids() {
  // @@protoc_insertion_point(field_add_mutable:agrirouter.feed.request.MessageDelete.message_ids)
  return message_ids_.Add();
}
void MessageDelete::add_message_ids(const ::std::string& value) {
  message_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:agrirouter.feed.request.MessageDelete.message_ids)
}
void MessageDelete::add_message_ids(const char* value) {
  message_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:agrirouter.feed.request.MessageDelete.message_ids)
}
void MessageDelete::add_message_ids(const char* value, size_t size) {
  message_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:agrirouter.feed.request.MessageDelete.message_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
MessageDelete::message_ids() const {
  // @@protoc_insertion_point(field_list:agrirouter.feed.request.MessageDelete.message_ids)
  return message_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
MessageDelete::mutable_message_ids() {
  // @@protoc_insertion_point(field_mutable_list:agrirouter.feed.request.MessageDelete.message_ids)
  return &message_ids_;
}

// repeated string senders = 2;
int MessageDelete::senders_size() const {
  return senders_.size();
}
void MessageDelete::clear_senders() {
  senders_.Clear();
}
const ::std::string& MessageDelete::senders(int index) const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.request.MessageDelete.senders)
  return senders_.Get(index);
}
::std::string* MessageDelete::mutable_senders(int index) {
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.request.MessageDelete.senders)
  return senders_.Mutable(index);
}
void MessageDelete::set_senders(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:agrirouter.feed.request.MessageDelete.senders)
  senders_.Mutable(index)->assign(value);
}
void MessageDelete::set_senders(int index, const char* value) {
  senders_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.request.MessageDelete.senders)
}
void MessageDelete::set_senders(int index, const char* value, size_t size) {
  senders_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.request.MessageDelete.senders)
}
::std::string* MessageDelete::add_senders() {
  // @@protoc_insertion_point(field_add_mutable:agrirouter.feed.request.MessageDelete.senders)
  return senders_.Add();
}
void MessageDelete::add_senders(const ::std::string& value) {
  senders_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:agrirouter.feed.request.MessageDelete.senders)
}
void MessageDelete::add_senders(const char* value) {
  senders_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:agrirouter.feed.request.MessageDelete.senders)
}
void MessageDelete::add_senders(const char* value, size_t size) {
  senders_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:agrirouter.feed.request.MessageDelete.senders)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
MessageDelete::senders() const {
  // @@protoc_insertion_point(field_list:agrirouter.feed.request.MessageDelete.senders)
  return senders_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
MessageDelete::mutable_senders() {
  // @@protoc_insertion_point(field_mutable_list:agrirouter.feed.request.MessageDelete.senders)
  return &senders_;
}

// optional .agrirouter.feed.request.ValidityPeriod validity_period = 3;
bool MessageDelete::has_validity_period() const {
  return this != internal_default_instance() && validity_period_ != NULL;
}
void MessageDelete::clear_validity_period() {
  if (GetArenaNoVirtual() == NULL && validity_period_ != NULL) delete validity_period_;
  validity_period_ = NULL;
}
const ::agrirouter::feed::request::ValidityPeriod& MessageDelete::validity_period() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.request.MessageDelete.validity_period)
  return validity_period_ != NULL ? *validity_period_
                         : *::agrirouter::feed::request::ValidityPeriod::internal_default_instance();
}
::agrirouter::feed::request::ValidityPeriod* MessageDelete::mutable_validity_period() {
  
  if (validity_period_ == NULL) {
    validity_period_ = new ::agrirouter::feed::request::ValidityPeriod;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.request.MessageDelete.validity_period)
  return validity_period_;
}
::agrirouter::feed::request::ValidityPeriod* MessageDelete::release_validity_period() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.request.MessageDelete.validity_period)
  
  ::agrirouter::feed::request::ValidityPeriod* temp = validity_period_;
  validity_period_ = NULL;
  return temp;
}
void MessageDelete::set_allocated_validity_period(::agrirouter::feed::request::ValidityPeriod* validity_period) {
  delete validity_period_;
  validity_period_ = validity_period;
  if (validity_period) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.request.MessageDelete.validity_period)
}

inline const MessageDelete* MessageDelete::internal_default_instance() {
  return &MessageDelete_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace request
}  // namespace feed
}  // namespace agrirouter

// @@protoc_insertion_point(global_scope)
