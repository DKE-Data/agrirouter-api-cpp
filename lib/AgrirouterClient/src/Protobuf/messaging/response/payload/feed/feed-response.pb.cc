// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messaging/response/payload/feed/feed-response.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messaging/response/payload/feed/feed-response.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace agrirouter {
namespace feed {
namespace response {

namespace {

const ::google::protobuf::Descriptor* Page_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Page_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryMetrics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryMetrics_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeaderQueryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeaderQueryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeaderQueryResponse_Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeaderQueryResponse_Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeaderQueryResponse_Feed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeaderQueryResponse_Feed_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageQueryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageQueryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageQueryResponse_Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageQueryResponse_Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageQueryResponse_FeedMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageQueryResponse_FeedMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* FailedMessageQueryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FailedMessageQueryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FailedMessageQueryResponse_Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FailedMessageQueryResponse_Header_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto() {
  protobuf_AddDesc_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messaging/response/payload/feed/feed-response.proto");
  GOOGLE_CHECK(file != NULL);
  Page_descriptor_ = file->message_type(0);
  static const int Page_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Page, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Page, total_),
  };
  Page_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Page_descriptor_,
      Page::internal_default_instance(),
      Page_offsets_,
      -1,
      -1,
      -1,
      sizeof(Page),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Page, _internal_metadata_));
  QueryMetrics_descriptor_ = file->message_type(1);
  static const int QueryMetrics_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMetrics, total_messages_in_query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMetrics, max_count_restriction_),
  };
  QueryMetrics_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryMetrics_descriptor_,
      QueryMetrics::internal_default_instance(),
      QueryMetrics_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueryMetrics),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMetrics, _internal_metadata_));
  HeaderQueryResponse_descriptor_ = file->message_type(2);
  static const int HeaderQueryResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderQueryResponse, querymetrics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderQueryResponse, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderQueryResponse, chunk_contexts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderQueryResponse, feed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderQueryResponse, pending_message_ids_),
  };
  HeaderQueryResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeaderQueryResponse_descriptor_,
      HeaderQueryResponse::internal_default_instance(),
      HeaderQueryResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(HeaderQueryResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderQueryResponse, _internal_metadata_));
  HeaderQueryResponse_Header_descriptor_ = HeaderQueryResponse_descriptor_->nested_type(0);
  static const int HeaderQueryResponse_Header_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderQueryResponse_Header, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderQueryResponse_Header, technical_message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderQueryResponse_Header, team_set_context_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderQueryResponse_Header, chunk_context_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderQueryResponse_Header, payload_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderQueryResponse_Header, sent_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderQueryResponse_Header, sequence_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderQueryResponse_Header, current_chunk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderQueryResponse_Header, created_at_),
  };
  HeaderQueryResponse_Header_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeaderQueryResponse_Header_descriptor_,
      HeaderQueryResponse_Header::internal_default_instance(),
      HeaderQueryResponse_Header_offsets_,
      -1,
      -1,
      -1,
      sizeof(HeaderQueryResponse_Header),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderQueryResponse_Header, _internal_metadata_));
  HeaderQueryResponse_Feed_descriptor_ = HeaderQueryResponse_descriptor_->nested_type(1);
  static const int HeaderQueryResponse_Feed_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderQueryResponse_Feed, sender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderQueryResponse_Feed, receiver_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderQueryResponse_Feed, headers_),
  };
  HeaderQueryResponse_Feed_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeaderQueryResponse_Feed_descriptor_,
      HeaderQueryResponse_Feed::internal_default_instance(),
      HeaderQueryResponse_Feed_offsets_,
      -1,
      -1,
      -1,
      sizeof(HeaderQueryResponse_Feed),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderQueryResponse_Feed, _internal_metadata_));
  MessageQueryResponse_descriptor_ = file->message_type(3);
  static const int MessageQueryResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageQueryResponse, querymetrics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageQueryResponse, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageQueryResponse, messages_),
  };
  MessageQueryResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageQueryResponse_descriptor_,
      MessageQueryResponse::internal_default_instance(),
      MessageQueryResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(MessageQueryResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageQueryResponse, _internal_metadata_));
  MessageQueryResponse_Header_descriptor_ = MessageQueryResponse_descriptor_->nested_type(0);
  static const int MessageQueryResponse_Header_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageQueryResponse_Header, receiver_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageQueryResponse_Header, technical_message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageQueryResponse_Header, team_set_context_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageQueryResponse_Header, chunk_context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageQueryResponse_Header, payload_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageQueryResponse_Header, sent_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageQueryResponse_Header, sequence_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageQueryResponse_Header, sender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageQueryResponse_Header, created_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageQueryResponse_Header, message_id_),
  };
  MessageQueryResponse_Header_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageQueryResponse_Header_descriptor_,
      MessageQueryResponse_Header::internal_default_instance(),
      MessageQueryResponse_Header_offsets_,
      -1,
      -1,
      -1,
      sizeof(MessageQueryResponse_Header),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageQueryResponse_Header, _internal_metadata_));
  MessageQueryResponse_FeedMessage_descriptor_ = MessageQueryResponse_descriptor_->nested_type(1);
  static const int MessageQueryResponse_FeedMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageQueryResponse_FeedMessage, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageQueryResponse_FeedMessage, content_),
  };
  MessageQueryResponse_FeedMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageQueryResponse_FeedMessage_descriptor_,
      MessageQueryResponse_FeedMessage::internal_default_instance(),
      MessageQueryResponse_FeedMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(MessageQueryResponse_FeedMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageQueryResponse_FeedMessage, _internal_metadata_));
  FailedMessageQueryResponse_descriptor_ = file->message_type(4);
  static const int FailedMessageQueryResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FailedMessageQueryResponse, querymetrics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FailedMessageQueryResponse, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FailedMessageQueryResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FailedMessageQueryResponse, reasons_),
  };
  FailedMessageQueryResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FailedMessageQueryResponse_descriptor_,
      FailedMessageQueryResponse::internal_default_instance(),
      FailedMessageQueryResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(FailedMessageQueryResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FailedMessageQueryResponse, _internal_metadata_));
  FailedMessageQueryResponse_Header_descriptor_ = FailedMessageQueryResponse_descriptor_->nested_type(0);
  static const int FailedMessageQueryResponse_Header_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FailedMessageQueryResponse_Header, technical_message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FailedMessageQueryResponse_Header, team_set_context_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FailedMessageQueryResponse_Header, payload_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FailedMessageQueryResponse_Header, sent_timestamp_),
  };
  FailedMessageQueryResponse_Header_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FailedMessageQueryResponse_Header_descriptor_,
      FailedMessageQueryResponse_Header::internal_default_instance(),
      FailedMessageQueryResponse_Header_offsets_,
      -1,
      -1,
      -1,
      sizeof(FailedMessageQueryResponse_Header),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FailedMessageQueryResponse_Header, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Page_descriptor_, Page::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryMetrics_descriptor_, QueryMetrics::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeaderQueryResponse_descriptor_, HeaderQueryResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeaderQueryResponse_Header_descriptor_, HeaderQueryResponse_Header::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeaderQueryResponse_Feed_descriptor_, HeaderQueryResponse_Feed::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageQueryResponse_descriptor_, MessageQueryResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageQueryResponse_Header_descriptor_, MessageQueryResponse_Header::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageQueryResponse_FeedMessage_descriptor_, MessageQueryResponse_FeedMessage::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FailedMessageQueryResponse_descriptor_, FailedMessageQueryResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FailedMessageQueryResponse_Header_descriptor_, FailedMessageQueryResponse_Header::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto() {
  Page_default_instance_.Shutdown();
  delete Page_reflection_;
  QueryMetrics_default_instance_.Shutdown();
  delete QueryMetrics_reflection_;
  HeaderQueryResponse_default_instance_.Shutdown();
  delete HeaderQueryResponse_reflection_;
  HeaderQueryResponse_Header_default_instance_.Shutdown();
  delete HeaderQueryResponse_Header_reflection_;
  HeaderQueryResponse_Feed_default_instance_.Shutdown();
  delete HeaderQueryResponse_Feed_reflection_;
  MessageQueryResponse_default_instance_.Shutdown();
  delete MessageQueryResponse_reflection_;
  MessageQueryResponse_Header_default_instance_.Shutdown();
  delete MessageQueryResponse_Header_reflection_;
  MessageQueryResponse_FeedMessage_default_instance_.Shutdown();
  delete MessageQueryResponse_FeedMessage_reflection_;
  FailedMessageQueryResponse_default_instance_.Shutdown();
  delete FailedMessageQueryResponse_reflection_;
  FailedMessageQueryResponse_Header_default_instance_.Shutdown();
  delete FailedMessageQueryResponse_Header_reflection_;
}

void protobuf_InitDefaults_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2fany_2eproto();
  ::agrirouter::commons::protobuf_InitDefaults_commons_2fmessage_2eproto();
  ::agrirouter::commons::protobuf_InitDefaults_commons_2fchunk_2eproto();
  Page_default_instance_.DefaultConstruct();
  QueryMetrics_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  HeaderQueryResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  HeaderQueryResponse_Header_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  HeaderQueryResponse_Feed_default_instance_.DefaultConstruct();
  MessageQueryResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MessageQueryResponse_Header_default_instance_.DefaultConstruct();
  MessageQueryResponse_FeedMessage_default_instance_.DefaultConstruct();
  FailedMessageQueryResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  FailedMessageQueryResponse_Header_default_instance_.DefaultConstruct();
  Page_default_instance_.get_mutable()->InitAsDefaultInstance();
  QueryMetrics_default_instance_.get_mutable()->InitAsDefaultInstance();
  HeaderQueryResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  HeaderQueryResponse_Header_default_instance_.get_mutable()->InitAsDefaultInstance();
  HeaderQueryResponse_Feed_default_instance_.get_mutable()->InitAsDefaultInstance();
  MessageQueryResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  MessageQueryResponse_Header_default_instance_.get_mutable()->InitAsDefaultInstance();
  MessageQueryResponse_FeedMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
  FailedMessageQueryResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  FailedMessageQueryResponse_Header_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto_once_);
void protobuf_InitDefaults_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto_once_,
                 &protobuf_InitDefaults_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto_impl);
}
void protobuf_AddDesc_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n3messaging/response/payload/feed/feed-r"
    "esponse.proto\022\030agrirouter.feed.response\032"
    "\037google/protobuf/timestamp.proto\032\031google"
    "/protobuf/any.proto\032\025commons/message.pro"
    "to\032\023commons/chunk.proto\"%\n\004Page\022\016\n\006numbe"
    "r\030\001 \001(\005\022\r\n\005total\030\002 \001(\005\"N\n\014QueryMetrics\022\037"
    "\n\027total_messages_in_query\030\001 \001(\005\022\035\n\025max_c"
    "ount_restriction\030\002 \001(\005\"\263\005\n\023HeaderQueryRe"
    "sponse\022<\n\014queryMetrics\030\001 \001(\0132&.agriroute"
    "r.feed.response.QueryMetrics\022,\n\004page\030\002 \001"
    "(\0132\036.agrirouter.feed.response.Page\022:\n\016ch"
    "unk_contexts\030\003 \003(\0132\".agrirouter.commons."
    "ChunkComponent\022@\n\004feed\030\004 \003(\01322.agriroute"
    "r.feed.response.HeaderQueryResponse.Feed"
    "\022\033\n\023pending_message_ids\030\005 \003(\t\032\235\002\n\006Header"
    "\022\022\n\nmessage_id\030\001 \001(\t\022\036\n\026technical_messag"
    "e_type\030\002 \001(\t\022\033\n\023team_set_context_id\030\003 \001("
    "\t\022\030\n\020chunk_context_id\030\004 \001(\t\022\024\n\014payload_s"
    "ize\030\005 \001(\003\0222\n\016sent_timestamp\030\006 \001(\0132\032.goog"
    "le.protobuf.Timestamp\022\027\n\017sequence_number"
    "\030\007 \001(\003\022\025\n\rcurrent_chunk\030\010 \001(\003\022.\n\ncreated"
    "_at\030\t \001(\0132\032.google.protobuf.Timestamp\032u\n"
    "\004Feed\022\021\n\tsender_id\030\001 \001(\t\022\023\n\013receiver_id\030"
    "\002 \001(\t\022E\n\007headers\030\003 \003(\01324.agrirouter.feed"
    ".response.HeaderQueryResponse.Header\"\237\005\n"
    "\024MessageQueryResponse\022<\n\014queryMetrics\030\001 "
    "\001(\0132&.agrirouter.feed.response.QueryMetr"
    "ics\022,\n\004page\030\002 \001(\0132\036.agrirouter.feed.resp"
    "onse.Page\022L\n\010messages\030\003 \003(\0132:.agrirouter"
    ".feed.response.MessageQueryResponse.Feed"
    "Message\032\317\002\n\006Header\022\023\n\013receiver_id\030\001 \001(\t\022"
    "\036\n\026technical_message_type\030\002 \001(\t\022\033\n\023team_"
    "set_context_id\030\003 \001(\t\0229\n\rchunk_context\030\004 "
    "\001(\0132\".agrirouter.commons.ChunkComponent\022"
    "\024\n\014payload_size\030\005 \001(\003\0222\n\016sent_timestamp\030"
    "\006 \001(\0132\032.google.protobuf.Timestamp\022\027\n\017seq"
    "uence_number\030\007 \001(\003\022\021\n\tsender_id\030\010 \001(\t\022.\n"
    "\ncreated_at\030\t \001(\0132\032.google.protobuf.Time"
    "stamp\022\022\n\nmessage_id\030\n \001(\t\032{\n\013FeedMessage"
    "\022E\n\006header\030\001 \001(\01325.agrirouter.feed.respo"
    "nse.MessageQueryResponse.Header\022%\n\007conte"
    "nt\030\002 \001(\0132\024.google.protobuf.Any\"\225\003\n\032Faile"
    "dMessageQueryResponse\022<\n\014queryMetrics\030\001 "
    "\001(\0132&.agrirouter.feed.response.QueryMetr"
    "ics\022,\n\004page\030\002 \001(\0132\036.agrirouter.feed.resp"
    "onse.Page\022K\n\006header\030\003 \001(\0132;.agrirouter.f"
    "eed.response.FailedMessageQueryResponse."
    "Header\022,\n\007reasons\030\004 \003(\0132\033.agrirouter.com"
    "mons.Message\032\217\001\n\006Header\022\036\n\026technical_mes"
    "sage_type\030\001 \001(\t\022\033\n\023team_set_context_id\030\002"
    " \001(\t\022\024\n\014payload_size\030\003 \001(\003\0222\n\016sent_times"
    "tamp\030\004 \001(\0132\032.google.protobuf.Timestampb\006"
    "proto3", 2086);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messaging/response/payload/feed/feed-response.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fany_2eproto();
  ::agrirouter::commons::protobuf_AddDesc_commons_2fmessage_2eproto();
  ::agrirouter::commons::protobuf_AddDesc_commons_2fchunk_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto_once_);
void protobuf_AddDesc_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto_once_,
                 &protobuf_AddDesc_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto {
  StaticDescriptorInitializer_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto() {
    protobuf_AddDesc_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto();
  }
} static_descriptor_initializer_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Page::kNumberFieldNumber;
const int Page::kTotalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Page::Page()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.feed.response.Page)
}

void Page::InitAsDefaultInstance() {
}

Page::Page(const Page& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agrirouter.feed.response.Page)
}

void Page::SharedCtor() {
  ::memset(&number_, 0, reinterpret_cast<char*>(&total_) -
    reinterpret_cast<char*>(&number_) + sizeof(total_));
  _cached_size_ = 0;
}

Page::~Page() {
  // @@protoc_insertion_point(destructor:agrirouter.feed.response.Page)
  SharedDtor();
}

void Page::SharedDtor() {
}

void Page::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Page::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Page_descriptor_;
}

const Page& Page::default_instance() {
  protobuf_InitDefaults_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Page> Page_default_instance_;

Page* Page::New(::google::protobuf::Arena* arena) const {
  Page* n = new Page;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Page::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.feed.response.Page)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Page, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Page*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(number_, total_);

#undef ZR_HELPER_
#undef ZR_

}

bool Page::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.feed.response.Page)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 number = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_total;
        break;
      }

      // optional int32 total = 2;
      case 2: {
        if (tag == 16) {
         parse_total:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.feed.response.Page)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.feed.response.Page)
  return false;
#undef DO_
}

void Page::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.feed.response.Page)
  // optional int32 number = 1;
  if (this->number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number(), output);
  }

  // optional int32 total = 2;
  if (this->total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total(), output);
  }

  // @@protoc_insertion_point(serialize_end:agrirouter.feed.response.Page)
}

::google::protobuf::uint8* Page::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.feed.response.Page)
  // optional int32 number = 1;
  if (this->number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->number(), target);
  }

  // optional int32 total = 2;
  if (this->total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.feed.response.Page)
  return target;
}

size_t Page::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.feed.response.Page)
  size_t total_size = 0;

  // optional int32 number = 1;
  if (this->number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->number());
  }

  // optional int32 total = 2;
  if (this->total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Page::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.feed.response.Page)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Page* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Page>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.feed.response.Page)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.feed.response.Page)
    UnsafeMergeFrom(*source);
  }
}

void Page::MergeFrom(const Page& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.feed.response.Page)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Page::UnsafeMergeFrom(const Page& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.number() != 0) {
    set_number(from.number());
  }
  if (from.total() != 0) {
    set_total(from.total());
  }
}

void Page::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.feed.response.Page)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Page::CopyFrom(const Page& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.feed.response.Page)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Page::IsInitialized() const {

  return true;
}

void Page::Swap(Page* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Page::InternalSwap(Page* other) {
  std::swap(number_, other->number_);
  std::swap(total_, other->total_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Page::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Page_descriptor_;
  metadata.reflection = Page_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Page

// optional int32 number = 1;
void Page::clear_number() {
  number_ = 0;
}
::google::protobuf::int32 Page::number() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.Page.number)
  return number_;
}
void Page::set_number(::google::protobuf::int32 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.Page.number)
}

// optional int32 total = 2;
void Page::clear_total() {
  total_ = 0;
}
::google::protobuf::int32 Page::total() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.Page.total)
  return total_;
}
void Page::set_total(::google::protobuf::int32 value) {
  
  total_ = value;
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.Page.total)
}

inline const Page* Page::internal_default_instance() {
  return &Page_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryMetrics::kTotalMessagesInQueryFieldNumber;
const int QueryMetrics::kMaxCountRestrictionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryMetrics::QueryMetrics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.feed.response.QueryMetrics)
}

void QueryMetrics::InitAsDefaultInstance() {
}

QueryMetrics::QueryMetrics(const QueryMetrics& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agrirouter.feed.response.QueryMetrics)
}

void QueryMetrics::SharedCtor() {
  ::memset(&total_messages_in_query_, 0, reinterpret_cast<char*>(&max_count_restriction_) -
    reinterpret_cast<char*>(&total_messages_in_query_) + sizeof(max_count_restriction_));
  _cached_size_ = 0;
}

QueryMetrics::~QueryMetrics() {
  // @@protoc_insertion_point(destructor:agrirouter.feed.response.QueryMetrics)
  SharedDtor();
}

void QueryMetrics::SharedDtor() {
}

void QueryMetrics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryMetrics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryMetrics_descriptor_;
}

const QueryMetrics& QueryMetrics::default_instance() {
  protobuf_InitDefaults_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QueryMetrics> QueryMetrics_default_instance_;

QueryMetrics* QueryMetrics::New(::google::protobuf::Arena* arena) const {
  QueryMetrics* n = new QueryMetrics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.feed.response.QueryMetrics)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(QueryMetrics, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QueryMetrics*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(total_messages_in_query_, max_count_restriction_);

#undef ZR_HELPER_
#undef ZR_

}

bool QueryMetrics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.feed.response.QueryMetrics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total_messages_in_query = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_messages_in_query_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_count_restriction;
        break;
      }

      // optional int32 max_count_restriction = 2;
      case 2: {
        if (tag == 16) {
         parse_max_count_restriction:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_count_restriction_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.feed.response.QueryMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.feed.response.QueryMetrics)
  return false;
#undef DO_
}

void QueryMetrics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.feed.response.QueryMetrics)
  // optional int32 total_messages_in_query = 1;
  if (this->total_messages_in_query() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_messages_in_query(), output);
  }

  // optional int32 max_count_restriction = 2;
  if (this->max_count_restriction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_count_restriction(), output);
  }

  // @@protoc_insertion_point(serialize_end:agrirouter.feed.response.QueryMetrics)
}

::google::protobuf::uint8* QueryMetrics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.feed.response.QueryMetrics)
  // optional int32 total_messages_in_query = 1;
  if (this->total_messages_in_query() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_messages_in_query(), target);
  }

  // optional int32 max_count_restriction = 2;
  if (this->max_count_restriction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_count_restriction(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.feed.response.QueryMetrics)
  return target;
}

size_t QueryMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.feed.response.QueryMetrics)
  size_t total_size = 0;

  // optional int32 total_messages_in_query = 1;
  if (this->total_messages_in_query() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_messages_in_query());
  }

  // optional int32 max_count_restriction = 2;
  if (this->max_count_restriction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_count_restriction());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryMetrics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.feed.response.QueryMetrics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryMetrics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryMetrics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.feed.response.QueryMetrics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.feed.response.QueryMetrics)
    UnsafeMergeFrom(*source);
  }
}

void QueryMetrics::MergeFrom(const QueryMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.feed.response.QueryMetrics)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QueryMetrics::UnsafeMergeFrom(const QueryMetrics& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.total_messages_in_query() != 0) {
    set_total_messages_in_query(from.total_messages_in_query());
  }
  if (from.max_count_restriction() != 0) {
    set_max_count_restriction(from.max_count_restriction());
  }
}

void QueryMetrics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.feed.response.QueryMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryMetrics::CopyFrom(const QueryMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.feed.response.QueryMetrics)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QueryMetrics::IsInitialized() const {

  return true;
}

void QueryMetrics::Swap(QueryMetrics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryMetrics::InternalSwap(QueryMetrics* other) {
  std::swap(total_messages_in_query_, other->total_messages_in_query_);
  std::swap(max_count_restriction_, other->max_count_restriction_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryMetrics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryMetrics_descriptor_;
  metadata.reflection = QueryMetrics_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryMetrics

// optional int32 total_messages_in_query = 1;
void QueryMetrics::clear_total_messages_in_query() {
  total_messages_in_query_ = 0;
}
::google::protobuf::int32 QueryMetrics::total_messages_in_query() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.QueryMetrics.total_messages_in_query)
  return total_messages_in_query_;
}
void QueryMetrics::set_total_messages_in_query(::google::protobuf::int32 value) {
  
  total_messages_in_query_ = value;
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.QueryMetrics.total_messages_in_query)
}

// optional int32 max_count_restriction = 2;
void QueryMetrics::clear_max_count_restriction() {
  max_count_restriction_ = 0;
}
::google::protobuf::int32 QueryMetrics::max_count_restriction() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.QueryMetrics.max_count_restriction)
  return max_count_restriction_;
}
void QueryMetrics::set_max_count_restriction(::google::protobuf::int32 value) {
  
  max_count_restriction_ = value;
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.QueryMetrics.max_count_restriction)
}

inline const QueryMetrics* QueryMetrics::internal_default_instance() {
  return &QueryMetrics_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeaderQueryResponse_Header::kMessageIdFieldNumber;
const int HeaderQueryResponse_Header::kTechnicalMessageTypeFieldNumber;
const int HeaderQueryResponse_Header::kTeamSetContextIdFieldNumber;
const int HeaderQueryResponse_Header::kChunkContextIdFieldNumber;
const int HeaderQueryResponse_Header::kPayloadSizeFieldNumber;
const int HeaderQueryResponse_Header::kSentTimestampFieldNumber;
const int HeaderQueryResponse_Header::kSequenceNumberFieldNumber;
const int HeaderQueryResponse_Header::kCurrentChunkFieldNumber;
const int HeaderQueryResponse_Header::kCreatedAtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeaderQueryResponse_Header::HeaderQueryResponse_Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.feed.response.HeaderQueryResponse.Header)
}

void HeaderQueryResponse_Header::InitAsDefaultInstance() {
  sent_timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  created_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}

HeaderQueryResponse_Header::HeaderQueryResponse_Header(const HeaderQueryResponse_Header& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agrirouter.feed.response.HeaderQueryResponse.Header)
}

void HeaderQueryResponse_Header::SharedCtor() {
  message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  technical_message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_set_context_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chunk_context_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sent_timestamp_ = NULL;
  created_at_ = NULL;
  ::memset(&payload_size_, 0, reinterpret_cast<char*>(&current_chunk_) -
    reinterpret_cast<char*>(&payload_size_) + sizeof(current_chunk_));
  _cached_size_ = 0;
}

HeaderQueryResponse_Header::~HeaderQueryResponse_Header() {
  // @@protoc_insertion_point(destructor:agrirouter.feed.response.HeaderQueryResponse.Header)
  SharedDtor();
}

void HeaderQueryResponse_Header::SharedDtor() {
  message_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  technical_message_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_set_context_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chunk_context_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &HeaderQueryResponse_Header_default_instance_.get()) {
    delete sent_timestamp_;
    delete created_at_;
  }
}

void HeaderQueryResponse_Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeaderQueryResponse_Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeaderQueryResponse_Header_descriptor_;
}

const HeaderQueryResponse_Header& HeaderQueryResponse_Header::default_instance() {
  protobuf_InitDefaults_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HeaderQueryResponse_Header> HeaderQueryResponse_Header_default_instance_;

HeaderQueryResponse_Header* HeaderQueryResponse_Header::New(::google::protobuf::Arena* arena) const {
  HeaderQueryResponse_Header* n = new HeaderQueryResponse_Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeaderQueryResponse_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.feed.response.HeaderQueryResponse.Header)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HeaderQueryResponse_Header, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HeaderQueryResponse_Header*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(payload_size_, current_chunk_);
  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  technical_message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_set_context_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chunk_context_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && sent_timestamp_ != NULL) delete sent_timestamp_;
  sent_timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && created_at_ != NULL) delete created_at_;
  created_at_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool HeaderQueryResponse_Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.feed.response.HeaderQueryResponse.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message_id().data(), this->message_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.response.HeaderQueryResponse.Header.message_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_technical_message_type;
        break;
      }

      // optional string technical_message_type = 2;
      case 2: {
        if (tag == 18) {
         parse_technical_message_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_technical_message_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->technical_message_type().data(), this->technical_message_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.response.HeaderQueryResponse.Header.technical_message_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_team_set_context_id;
        break;
      }

      // optional string team_set_context_id = 3;
      case 3: {
        if (tag == 26) {
         parse_team_set_context_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_set_context_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->team_set_context_id().data(), this->team_set_context_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.response.HeaderQueryResponse.Header.team_set_context_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_chunk_context_id;
        break;
      }

      // optional string chunk_context_id = 4;
      case 4: {
        if (tag == 34) {
         parse_chunk_context_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chunk_context_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chunk_context_id().data(), this->chunk_context_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.response.HeaderQueryResponse.Header.chunk_context_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_payload_size;
        break;
      }

      // optional int64 payload_size = 5;
      case 5: {
        if (tag == 40) {
         parse_payload_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &payload_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sent_timestamp;
        break;
      }

      // optional .google.protobuf.Timestamp sent_timestamp = 6;
      case 6: {
        if (tag == 50) {
         parse_sent_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sent_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sequence_number;
        break;
      }

      // optional int64 sequence_number = 7;
      case 7: {
        if (tag == 56) {
         parse_sequence_number:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_current_chunk;
        break;
      }

      // optional int64 current_chunk = 8;
      case 8: {
        if (tag == 64) {
         parse_current_chunk:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &current_chunk_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_created_at;
        break;
      }

      // optional .google.protobuf.Timestamp created_at = 9;
      case 9: {
        if (tag == 74) {
         parse_created_at:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_created_at()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.feed.response.HeaderQueryResponse.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.feed.response.HeaderQueryResponse.Header)
  return false;
#undef DO_
}

void HeaderQueryResponse_Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.feed.response.HeaderQueryResponse.Header)
  // optional string message_id = 1;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), this->message_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.HeaderQueryResponse.Header.message_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message_id(), output);
  }

  // optional string technical_message_type = 2;
  if (this->technical_message_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->technical_message_type().data(), this->technical_message_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.HeaderQueryResponse.Header.technical_message_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->technical_message_type(), output);
  }

  // optional string team_set_context_id = 3;
  if (this->team_set_context_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team_set_context_id().data(), this->team_set_context_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.HeaderQueryResponse.Header.team_set_context_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team_set_context_id(), output);
  }

  // optional string chunk_context_id = 4;
  if (this->chunk_context_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chunk_context_id().data(), this->chunk_context_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.HeaderQueryResponse.Header.chunk_context_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->chunk_context_id(), output);
  }

  // optional int64 payload_size = 5;
  if (this->payload_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->payload_size(), output);
  }

  // optional .google.protobuf.Timestamp sent_timestamp = 6;
  if (this->has_sent_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->sent_timestamp_, output);
  }

  // optional int64 sequence_number = 7;
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->sequence_number(), output);
  }

  // optional int64 current_chunk = 8;
  if (this->current_chunk() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->current_chunk(), output);
  }

  // optional .google.protobuf.Timestamp created_at = 9;
  if (this->has_created_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->created_at_, output);
  }

  // @@protoc_insertion_point(serialize_end:agrirouter.feed.response.HeaderQueryResponse.Header)
}

::google::protobuf::uint8* HeaderQueryResponse_Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.feed.response.HeaderQueryResponse.Header)
  // optional string message_id = 1;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), this->message_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.HeaderQueryResponse.Header.message_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message_id(), target);
  }

  // optional string technical_message_type = 2;
  if (this->technical_message_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->technical_message_type().data(), this->technical_message_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.HeaderQueryResponse.Header.technical_message_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->technical_message_type(), target);
  }

  // optional string team_set_context_id = 3;
  if (this->team_set_context_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team_set_context_id().data(), this->team_set_context_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.HeaderQueryResponse.Header.team_set_context_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_set_context_id(), target);
  }

  // optional string chunk_context_id = 4;
  if (this->chunk_context_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chunk_context_id().data(), this->chunk_context_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.HeaderQueryResponse.Header.chunk_context_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->chunk_context_id(), target);
  }

  // optional int64 payload_size = 5;
  if (this->payload_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->payload_size(), target);
  }

  // optional .google.protobuf.Timestamp sent_timestamp = 6;
  if (this->has_sent_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->sent_timestamp_, false, target);
  }

  // optional int64 sequence_number = 7;
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->sequence_number(), target);
  }

  // optional int64 current_chunk = 8;
  if (this->current_chunk() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->current_chunk(), target);
  }

  // optional .google.protobuf.Timestamp created_at = 9;
  if (this->has_created_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->created_at_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.feed.response.HeaderQueryResponse.Header)
  return target;
}

size_t HeaderQueryResponse_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.feed.response.HeaderQueryResponse.Header)
  size_t total_size = 0;

  // optional string message_id = 1;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message_id());
  }

  // optional string technical_message_type = 2;
  if (this->technical_message_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->technical_message_type());
  }

  // optional string team_set_context_id = 3;
  if (this->team_set_context_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->team_set_context_id());
  }

  // optional string chunk_context_id = 4;
  if (this->chunk_context_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chunk_context_id());
  }

  // optional int64 payload_size = 5;
  if (this->payload_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->payload_size());
  }

  // optional .google.protobuf.Timestamp sent_timestamp = 6;
  if (this->has_sent_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sent_timestamp_);
  }

  // optional int64 sequence_number = 7;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence_number());
  }

  // optional int64 current_chunk = 8;
  if (this->current_chunk() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->current_chunk());
  }

  // optional .google.protobuf.Timestamp created_at = 9;
  if (this->has_created_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->created_at_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeaderQueryResponse_Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.feed.response.HeaderQueryResponse.Header)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HeaderQueryResponse_Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeaderQueryResponse_Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.feed.response.HeaderQueryResponse.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.feed.response.HeaderQueryResponse.Header)
    UnsafeMergeFrom(*source);
  }
}

void HeaderQueryResponse_Header::MergeFrom(const HeaderQueryResponse_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.feed.response.HeaderQueryResponse.Header)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HeaderQueryResponse_Header::UnsafeMergeFrom(const HeaderQueryResponse_Header& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.message_id().size() > 0) {

    message_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_id_);
  }
  if (from.technical_message_type().size() > 0) {

    technical_message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.technical_message_type_);
  }
  if (from.team_set_context_id().size() > 0) {

    team_set_context_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_set_context_id_);
  }
  if (from.chunk_context_id().size() > 0) {

    chunk_context_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chunk_context_id_);
  }
  if (from.payload_size() != 0) {
    set_payload_size(from.payload_size());
  }
  if (from.has_sent_timestamp()) {
    mutable_sent_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.sent_timestamp());
  }
  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
  if (from.current_chunk() != 0) {
    set_current_chunk(from.current_chunk());
  }
  if (from.has_created_at()) {
    mutable_created_at()->::google::protobuf::Timestamp::MergeFrom(from.created_at());
  }
}

void HeaderQueryResponse_Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.feed.response.HeaderQueryResponse.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeaderQueryResponse_Header::CopyFrom(const HeaderQueryResponse_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.feed.response.HeaderQueryResponse.Header)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HeaderQueryResponse_Header::IsInitialized() const {

  return true;
}

void HeaderQueryResponse_Header::Swap(HeaderQueryResponse_Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeaderQueryResponse_Header::InternalSwap(HeaderQueryResponse_Header* other) {
  message_id_.Swap(&other->message_id_);
  technical_message_type_.Swap(&other->technical_message_type_);
  team_set_context_id_.Swap(&other->team_set_context_id_);
  chunk_context_id_.Swap(&other->chunk_context_id_);
  std::swap(payload_size_, other->payload_size_);
  std::swap(sent_timestamp_, other->sent_timestamp_);
  std::swap(sequence_number_, other->sequence_number_);
  std::swap(current_chunk_, other->current_chunk_);
  std::swap(created_at_, other->created_at_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeaderQueryResponse_Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeaderQueryResponse_Header_descriptor_;
  metadata.reflection = HeaderQueryResponse_Header_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeaderQueryResponse_Feed::kSenderIdFieldNumber;
const int HeaderQueryResponse_Feed::kReceiverIdFieldNumber;
const int HeaderQueryResponse_Feed::kHeadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeaderQueryResponse_Feed::HeaderQueryResponse_Feed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.feed.response.HeaderQueryResponse.Feed)
}

void HeaderQueryResponse_Feed::InitAsDefaultInstance() {
}

HeaderQueryResponse_Feed::HeaderQueryResponse_Feed(const HeaderQueryResponse_Feed& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agrirouter.feed.response.HeaderQueryResponse.Feed)
}

void HeaderQueryResponse_Feed::SharedCtor() {
  sender_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiver_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

HeaderQueryResponse_Feed::~HeaderQueryResponse_Feed() {
  // @@protoc_insertion_point(destructor:agrirouter.feed.response.HeaderQueryResponse.Feed)
  SharedDtor();
}

void HeaderQueryResponse_Feed::SharedDtor() {
  sender_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiver_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HeaderQueryResponse_Feed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeaderQueryResponse_Feed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeaderQueryResponse_Feed_descriptor_;
}

const HeaderQueryResponse_Feed& HeaderQueryResponse_Feed::default_instance() {
  protobuf_InitDefaults_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HeaderQueryResponse_Feed> HeaderQueryResponse_Feed_default_instance_;

HeaderQueryResponse_Feed* HeaderQueryResponse_Feed::New(::google::protobuf::Arena* arena) const {
  HeaderQueryResponse_Feed* n = new HeaderQueryResponse_Feed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeaderQueryResponse_Feed::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.feed.response.HeaderQueryResponse.Feed)
  sender_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiver_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headers_.Clear();
}

bool HeaderQueryResponse_Feed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.feed.response.HeaderQueryResponse.Feed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sender_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sender_id().data(), this->sender_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.response.HeaderQueryResponse.Feed.sender_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_receiver_id;
        break;
      }

      // optional string receiver_id = 2;
      case 2: {
        if (tag == 18) {
         parse_receiver_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiver_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->receiver_id().data(), this->receiver_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.response.HeaderQueryResponse.Feed.receiver_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_headers;
        break;
      }

      // repeated .agrirouter.feed.response.HeaderQueryResponse.Header headers = 3;
      case 3: {
        if (tag == 26) {
         parse_headers:
          DO_(input->IncrementRecursionDepth());
         parse_loop_headers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_headers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.feed.response.HeaderQueryResponse.Feed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.feed.response.HeaderQueryResponse.Feed)
  return false;
#undef DO_
}

void HeaderQueryResponse_Feed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.feed.response.HeaderQueryResponse.Feed)
  // optional string sender_id = 1;
  if (this->sender_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender_id().data(), this->sender_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.HeaderQueryResponse.Feed.sender_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sender_id(), output);
  }

  // optional string receiver_id = 2;
  if (this->receiver_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->receiver_id().data(), this->receiver_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.HeaderQueryResponse.Feed.receiver_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->receiver_id(), output);
  }

  // repeated .agrirouter.feed.response.HeaderQueryResponse.Header headers = 3;
  for (unsigned int i = 0, n = this->headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->headers(i), output);
  }

  // @@protoc_insertion_point(serialize_end:agrirouter.feed.response.HeaderQueryResponse.Feed)
}

::google::protobuf::uint8* HeaderQueryResponse_Feed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.feed.response.HeaderQueryResponse.Feed)
  // optional string sender_id = 1;
  if (this->sender_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender_id().data(), this->sender_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.HeaderQueryResponse.Feed.sender_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sender_id(), target);
  }

  // optional string receiver_id = 2;
  if (this->receiver_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->receiver_id().data(), this->receiver_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.HeaderQueryResponse.Feed.receiver_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->receiver_id(), target);
  }

  // repeated .agrirouter.feed.response.HeaderQueryResponse.Header headers = 3;
  for (unsigned int i = 0, n = this->headers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->headers(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.feed.response.HeaderQueryResponse.Feed)
  return target;
}

size_t HeaderQueryResponse_Feed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.feed.response.HeaderQueryResponse.Feed)
  size_t total_size = 0;

  // optional string sender_id = 1;
  if (this->sender_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sender_id());
  }

  // optional string receiver_id = 2;
  if (this->receiver_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->receiver_id());
  }

  // repeated .agrirouter.feed.response.HeaderQueryResponse.Header headers = 3;
  {
    unsigned int count = this->headers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->headers(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeaderQueryResponse_Feed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.feed.response.HeaderQueryResponse.Feed)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HeaderQueryResponse_Feed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeaderQueryResponse_Feed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.feed.response.HeaderQueryResponse.Feed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.feed.response.HeaderQueryResponse.Feed)
    UnsafeMergeFrom(*source);
  }
}

void HeaderQueryResponse_Feed::MergeFrom(const HeaderQueryResponse_Feed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.feed.response.HeaderQueryResponse.Feed)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HeaderQueryResponse_Feed::UnsafeMergeFrom(const HeaderQueryResponse_Feed& from) {
  GOOGLE_DCHECK(&from != this);
  headers_.MergeFrom(from.headers_);
  if (from.sender_id().size() > 0) {

    sender_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_id_);
  }
  if (from.receiver_id().size() > 0) {

    receiver_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receiver_id_);
  }
}

void HeaderQueryResponse_Feed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.feed.response.HeaderQueryResponse.Feed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeaderQueryResponse_Feed::CopyFrom(const HeaderQueryResponse_Feed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.feed.response.HeaderQueryResponse.Feed)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HeaderQueryResponse_Feed::IsInitialized() const {

  return true;
}

void HeaderQueryResponse_Feed::Swap(HeaderQueryResponse_Feed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeaderQueryResponse_Feed::InternalSwap(HeaderQueryResponse_Feed* other) {
  sender_id_.Swap(&other->sender_id_);
  receiver_id_.Swap(&other->receiver_id_);
  headers_.UnsafeArenaSwap(&other->headers_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeaderQueryResponse_Feed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeaderQueryResponse_Feed_descriptor_;
  metadata.reflection = HeaderQueryResponse_Feed_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeaderQueryResponse::kQueryMetricsFieldNumber;
const int HeaderQueryResponse::kPageFieldNumber;
const int HeaderQueryResponse::kChunkContextsFieldNumber;
const int HeaderQueryResponse::kFeedFieldNumber;
const int HeaderQueryResponse::kPendingMessageIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeaderQueryResponse::HeaderQueryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.feed.response.HeaderQueryResponse)
}

void HeaderQueryResponse::InitAsDefaultInstance() {
  querymetrics_ = const_cast< ::agrirouter::feed::response::QueryMetrics*>(
      ::agrirouter::feed::response::QueryMetrics::internal_default_instance());
  page_ = const_cast< ::agrirouter::feed::response::Page*>(
      ::agrirouter::feed::response::Page::internal_default_instance());
}

HeaderQueryResponse::HeaderQueryResponse(const HeaderQueryResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agrirouter.feed.response.HeaderQueryResponse)
}

void HeaderQueryResponse::SharedCtor() {
  querymetrics_ = NULL;
  page_ = NULL;
  _cached_size_ = 0;
}

HeaderQueryResponse::~HeaderQueryResponse() {
  // @@protoc_insertion_point(destructor:agrirouter.feed.response.HeaderQueryResponse)
  SharedDtor();
}

void HeaderQueryResponse::SharedDtor() {
  if (this != &HeaderQueryResponse_default_instance_.get()) {
    delete querymetrics_;
    delete page_;
  }
}

void HeaderQueryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeaderQueryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeaderQueryResponse_descriptor_;
}

const HeaderQueryResponse& HeaderQueryResponse::default_instance() {
  protobuf_InitDefaults_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HeaderQueryResponse> HeaderQueryResponse_default_instance_;

HeaderQueryResponse* HeaderQueryResponse::New(::google::protobuf::Arena* arena) const {
  HeaderQueryResponse* n = new HeaderQueryResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeaderQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.feed.response.HeaderQueryResponse)
  if (GetArenaNoVirtual() == NULL && querymetrics_ != NULL) delete querymetrics_;
  querymetrics_ = NULL;
  if (GetArenaNoVirtual() == NULL && page_ != NULL) delete page_;
  page_ = NULL;
  chunk_contexts_.Clear();
  feed_.Clear();
  pending_message_ids_.Clear();
}

bool HeaderQueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.feed.response.HeaderQueryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_querymetrics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_page;
        break;
      }

      // optional .agrirouter.feed.response.Page page = 2;
      case 2: {
        if (tag == 18) {
         parse_page:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_page()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_chunk_contexts;
        break;
      }

      // repeated .agrirouter.commons.ChunkComponent chunk_contexts = 3;
      case 3: {
        if (tag == 26) {
         parse_chunk_contexts:
          DO_(input->IncrementRecursionDepth());
         parse_loop_chunk_contexts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_chunk_contexts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_chunk_contexts;
        if (input->ExpectTag(34)) goto parse_loop_feed;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .agrirouter.feed.response.HeaderQueryResponse.Feed feed = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_feed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_feed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_feed;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_pending_message_ids;
        break;
      }

      // repeated string pending_message_ids = 5;
      case 5: {
        if (tag == 42) {
         parse_pending_message_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pending_message_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pending_message_ids(this->pending_message_ids_size() - 1).data(),
            this->pending_message_ids(this->pending_message_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.response.HeaderQueryResponse.pending_message_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pending_message_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.feed.response.HeaderQueryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.feed.response.HeaderQueryResponse)
  return false;
#undef DO_
}

void HeaderQueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.feed.response.HeaderQueryResponse)
  // optional .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
  if (this->has_querymetrics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->querymetrics_, output);
  }

  // optional .agrirouter.feed.response.Page page = 2;
  if (this->has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->page_, output);
  }

  // repeated .agrirouter.commons.ChunkComponent chunk_contexts = 3;
  for (unsigned int i = 0, n = this->chunk_contexts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->chunk_contexts(i), output);
  }

  // repeated .agrirouter.feed.response.HeaderQueryResponse.Feed feed = 4;
  for (unsigned int i = 0, n = this->feed_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->feed(i), output);
  }

  // repeated string pending_message_ids = 5;
  for (int i = 0; i < this->pending_message_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pending_message_ids(i).data(), this->pending_message_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.HeaderQueryResponse.pending_message_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->pending_message_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:agrirouter.feed.response.HeaderQueryResponse)
}

::google::protobuf::uint8* HeaderQueryResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.feed.response.HeaderQueryResponse)
  // optional .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
  if (this->has_querymetrics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->querymetrics_, false, target);
  }

  // optional .agrirouter.feed.response.Page page = 2;
  if (this->has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->page_, false, target);
  }

  // repeated .agrirouter.commons.ChunkComponent chunk_contexts = 3;
  for (unsigned int i = 0, n = this->chunk_contexts_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->chunk_contexts(i), false, target);
  }

  // repeated .agrirouter.feed.response.HeaderQueryResponse.Feed feed = 4;
  for (unsigned int i = 0, n = this->feed_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->feed(i), false, target);
  }

  // repeated string pending_message_ids = 5;
  for (int i = 0; i < this->pending_message_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pending_message_ids(i).data(), this->pending_message_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.HeaderQueryResponse.pending_message_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->pending_message_ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.feed.response.HeaderQueryResponse)
  return target;
}

size_t HeaderQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.feed.response.HeaderQueryResponse)
  size_t total_size = 0;

  // optional .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
  if (this->has_querymetrics()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->querymetrics_);
  }

  // optional .agrirouter.feed.response.Page page = 2;
  if (this->has_page()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->page_);
  }

  // repeated .agrirouter.commons.ChunkComponent chunk_contexts = 3;
  {
    unsigned int count = this->chunk_contexts_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chunk_contexts(i));
    }
  }

  // repeated .agrirouter.feed.response.HeaderQueryResponse.Feed feed = 4;
  {
    unsigned int count = this->feed_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->feed(i));
    }
  }

  // repeated string pending_message_ids = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->pending_message_ids_size());
  for (int i = 0; i < this->pending_message_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pending_message_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeaderQueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.feed.response.HeaderQueryResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HeaderQueryResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeaderQueryResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.feed.response.HeaderQueryResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.feed.response.HeaderQueryResponse)
    UnsafeMergeFrom(*source);
  }
}

void HeaderQueryResponse::MergeFrom(const HeaderQueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.feed.response.HeaderQueryResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HeaderQueryResponse::UnsafeMergeFrom(const HeaderQueryResponse& from) {
  GOOGLE_DCHECK(&from != this);
  chunk_contexts_.MergeFrom(from.chunk_contexts_);
  feed_.MergeFrom(from.feed_);
  pending_message_ids_.UnsafeMergeFrom(from.pending_message_ids_);
  if (from.has_querymetrics()) {
    mutable_querymetrics()->::agrirouter::feed::response::QueryMetrics::MergeFrom(from.querymetrics());
  }
  if (from.has_page()) {
    mutable_page()->::agrirouter::feed::response::Page::MergeFrom(from.page());
  }
}

void HeaderQueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.feed.response.HeaderQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeaderQueryResponse::CopyFrom(const HeaderQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.feed.response.HeaderQueryResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HeaderQueryResponse::IsInitialized() const {

  return true;
}

void HeaderQueryResponse::Swap(HeaderQueryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeaderQueryResponse::InternalSwap(HeaderQueryResponse* other) {
  std::swap(querymetrics_, other->querymetrics_);
  std::swap(page_, other->page_);
  chunk_contexts_.UnsafeArenaSwap(&other->chunk_contexts_);
  feed_.UnsafeArenaSwap(&other->feed_);
  pending_message_ids_.UnsafeArenaSwap(&other->pending_message_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeaderQueryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeaderQueryResponse_descriptor_;
  metadata.reflection = HeaderQueryResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeaderQueryResponse_Header

// optional string message_id = 1;
void HeaderQueryResponse_Header::clear_message_id() {
  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HeaderQueryResponse_Header::message_id() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.Header.message_id)
  return message_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HeaderQueryResponse_Header::set_message_id(const ::std::string& value) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.HeaderQueryResponse.Header.message_id)
}
void HeaderQueryResponse_Header::set_message_id(const char* value) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.response.HeaderQueryResponse.Header.message_id)
}
void HeaderQueryResponse_Header::set_message_id(const char* value, size_t size) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.response.HeaderQueryResponse.Header.message_id)
}
::std::string* HeaderQueryResponse_Header::mutable_message_id() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.HeaderQueryResponse.Header.message_id)
  return message_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HeaderQueryResponse_Header::release_message_id() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.HeaderQueryResponse.Header.message_id)
  
  return message_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HeaderQueryResponse_Header::set_allocated_message_id(::std::string* message_id) {
  if (message_id != NULL) {
    
  } else {
    
  }
  message_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_id);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.HeaderQueryResponse.Header.message_id)
}

// optional string technical_message_type = 2;
void HeaderQueryResponse_Header::clear_technical_message_type() {
  technical_message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HeaderQueryResponse_Header::technical_message_type() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.Header.technical_message_type)
  return technical_message_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HeaderQueryResponse_Header::set_technical_message_type(const ::std::string& value) {
  
  technical_message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.HeaderQueryResponse.Header.technical_message_type)
}
void HeaderQueryResponse_Header::set_technical_message_type(const char* value) {
  
  technical_message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.response.HeaderQueryResponse.Header.technical_message_type)
}
void HeaderQueryResponse_Header::set_technical_message_type(const char* value, size_t size) {
  
  technical_message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.response.HeaderQueryResponse.Header.technical_message_type)
}
::std::string* HeaderQueryResponse_Header::mutable_technical_message_type() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.HeaderQueryResponse.Header.technical_message_type)
  return technical_message_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HeaderQueryResponse_Header::release_technical_message_type() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.HeaderQueryResponse.Header.technical_message_type)
  
  return technical_message_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HeaderQueryResponse_Header::set_allocated_technical_message_type(::std::string* technical_message_type) {
  if (technical_message_type != NULL) {
    
  } else {
    
  }
  technical_message_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), technical_message_type);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.HeaderQueryResponse.Header.technical_message_type)
}

// optional string team_set_context_id = 3;
void HeaderQueryResponse_Header::clear_team_set_context_id() {
  team_set_context_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HeaderQueryResponse_Header::team_set_context_id() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.Header.team_set_context_id)
  return team_set_context_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HeaderQueryResponse_Header::set_team_set_context_id(const ::std::string& value) {
  
  team_set_context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.HeaderQueryResponse.Header.team_set_context_id)
}
void HeaderQueryResponse_Header::set_team_set_context_id(const char* value) {
  
  team_set_context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.response.HeaderQueryResponse.Header.team_set_context_id)
}
void HeaderQueryResponse_Header::set_team_set_context_id(const char* value, size_t size) {
  
  team_set_context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.response.HeaderQueryResponse.Header.team_set_context_id)
}
::std::string* HeaderQueryResponse_Header::mutable_team_set_context_id() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.HeaderQueryResponse.Header.team_set_context_id)
  return team_set_context_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HeaderQueryResponse_Header::release_team_set_context_id() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.HeaderQueryResponse.Header.team_set_context_id)
  
  return team_set_context_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HeaderQueryResponse_Header::set_allocated_team_set_context_id(::std::string* team_set_context_id) {
  if (team_set_context_id != NULL) {
    
  } else {
    
  }
  team_set_context_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_set_context_id);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.HeaderQueryResponse.Header.team_set_context_id)
}

// optional string chunk_context_id = 4;
void HeaderQueryResponse_Header::clear_chunk_context_id() {
  chunk_context_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HeaderQueryResponse_Header::chunk_context_id() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.Header.chunk_context_id)
  return chunk_context_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HeaderQueryResponse_Header::set_chunk_context_id(const ::std::string& value) {
  
  chunk_context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.HeaderQueryResponse.Header.chunk_context_id)
}
void HeaderQueryResponse_Header::set_chunk_context_id(const char* value) {
  
  chunk_context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.response.HeaderQueryResponse.Header.chunk_context_id)
}
void HeaderQueryResponse_Header::set_chunk_context_id(const char* value, size_t size) {
  
  chunk_context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.response.HeaderQueryResponse.Header.chunk_context_id)
}
::std::string* HeaderQueryResponse_Header::mutable_chunk_context_id() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.HeaderQueryResponse.Header.chunk_context_id)
  return chunk_context_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HeaderQueryResponse_Header::release_chunk_context_id() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.HeaderQueryResponse.Header.chunk_context_id)
  
  return chunk_context_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HeaderQueryResponse_Header::set_allocated_chunk_context_id(::std::string* chunk_context_id) {
  if (chunk_context_id != NULL) {
    
  } else {
    
  }
  chunk_context_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chunk_context_id);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.HeaderQueryResponse.Header.chunk_context_id)
}

// optional int64 payload_size = 5;
void HeaderQueryResponse_Header::clear_payload_size() {
  payload_size_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 HeaderQueryResponse_Header::payload_size() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.Header.payload_size)
  return payload_size_;
}
void HeaderQueryResponse_Header::set_payload_size(::google::protobuf::int64 value) {
  
  payload_size_ = value;
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.HeaderQueryResponse.Header.payload_size)
}

// optional .google.protobuf.Timestamp sent_timestamp = 6;
bool HeaderQueryResponse_Header::has_sent_timestamp() const {
  return this != internal_default_instance() && sent_timestamp_ != NULL;
}
void HeaderQueryResponse_Header::clear_sent_timestamp() {
  if (GetArenaNoVirtual() == NULL && sent_timestamp_ != NULL) delete sent_timestamp_;
  sent_timestamp_ = NULL;
}
const ::google::protobuf::Timestamp& HeaderQueryResponse_Header::sent_timestamp() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.Header.sent_timestamp)
  return sent_timestamp_ != NULL ? *sent_timestamp_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* HeaderQueryResponse_Header::mutable_sent_timestamp() {
  
  if (sent_timestamp_ == NULL) {
    sent_timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.HeaderQueryResponse.Header.sent_timestamp)
  return sent_timestamp_;
}
::google::protobuf::Timestamp* HeaderQueryResponse_Header::release_sent_timestamp() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.HeaderQueryResponse.Header.sent_timestamp)
  
  ::google::protobuf::Timestamp* temp = sent_timestamp_;
  sent_timestamp_ = NULL;
  return temp;
}
void HeaderQueryResponse_Header::set_allocated_sent_timestamp(::google::protobuf::Timestamp* sent_timestamp) {
  delete sent_timestamp_;
  if (sent_timestamp != NULL && sent_timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_sent_timestamp = new ::google::protobuf::Timestamp;
    new_sent_timestamp->CopyFrom(*sent_timestamp);
    sent_timestamp = new_sent_timestamp;
  }
  sent_timestamp_ = sent_timestamp;
  if (sent_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.HeaderQueryResponse.Header.sent_timestamp)
}

// optional int64 sequence_number = 7;
void HeaderQueryResponse_Header::clear_sequence_number() {
  sequence_number_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 HeaderQueryResponse_Header::sequence_number() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.Header.sequence_number)
  return sequence_number_;
}
void HeaderQueryResponse_Header::set_sequence_number(::google::protobuf::int64 value) {
  
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.HeaderQueryResponse.Header.sequence_number)
}

// optional int64 current_chunk = 8;
void HeaderQueryResponse_Header::clear_current_chunk() {
  current_chunk_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 HeaderQueryResponse_Header::current_chunk() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.Header.current_chunk)
  return current_chunk_;
}
void HeaderQueryResponse_Header::set_current_chunk(::google::protobuf::int64 value) {
  
  current_chunk_ = value;
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.HeaderQueryResponse.Header.current_chunk)
}

// optional .google.protobuf.Timestamp created_at = 9;
bool HeaderQueryResponse_Header::has_created_at() const {
  return this != internal_default_instance() && created_at_ != NULL;
}
void HeaderQueryResponse_Header::clear_created_at() {
  if (GetArenaNoVirtual() == NULL && created_at_ != NULL) delete created_at_;
  created_at_ = NULL;
}
const ::google::protobuf::Timestamp& HeaderQueryResponse_Header::created_at() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.Header.created_at)
  return created_at_ != NULL ? *created_at_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* HeaderQueryResponse_Header::mutable_created_at() {
  
  if (created_at_ == NULL) {
    created_at_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.HeaderQueryResponse.Header.created_at)
  return created_at_;
}
::google::protobuf::Timestamp* HeaderQueryResponse_Header::release_created_at() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.HeaderQueryResponse.Header.created_at)
  
  ::google::protobuf::Timestamp* temp = created_at_;
  created_at_ = NULL;
  return temp;
}
void HeaderQueryResponse_Header::set_allocated_created_at(::google::protobuf::Timestamp* created_at) {
  delete created_at_;
  if (created_at != NULL && created_at->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_created_at = new ::google::protobuf::Timestamp;
    new_created_at->CopyFrom(*created_at);
    created_at = new_created_at;
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.HeaderQueryResponse.Header.created_at)
}

inline const HeaderQueryResponse_Header* HeaderQueryResponse_Header::internal_default_instance() {
  return &HeaderQueryResponse_Header_default_instance_.get();
}
// -------------------------------------------------------------------

// HeaderQueryResponse_Feed

// optional string sender_id = 1;
void HeaderQueryResponse_Feed::clear_sender_id() {
  sender_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HeaderQueryResponse_Feed::sender_id() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.Feed.sender_id)
  return sender_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HeaderQueryResponse_Feed::set_sender_id(const ::std::string& value) {
  
  sender_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.HeaderQueryResponse.Feed.sender_id)
}
void HeaderQueryResponse_Feed::set_sender_id(const char* value) {
  
  sender_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.response.HeaderQueryResponse.Feed.sender_id)
}
void HeaderQueryResponse_Feed::set_sender_id(const char* value, size_t size) {
  
  sender_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.response.HeaderQueryResponse.Feed.sender_id)
}
::std::string* HeaderQueryResponse_Feed::mutable_sender_id() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.HeaderQueryResponse.Feed.sender_id)
  return sender_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HeaderQueryResponse_Feed::release_sender_id() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.HeaderQueryResponse.Feed.sender_id)
  
  return sender_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HeaderQueryResponse_Feed::set_allocated_sender_id(::std::string* sender_id) {
  if (sender_id != NULL) {
    
  } else {
    
  }
  sender_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_id);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.HeaderQueryResponse.Feed.sender_id)
}

// optional string receiver_id = 2;
void HeaderQueryResponse_Feed::clear_receiver_id() {
  receiver_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HeaderQueryResponse_Feed::receiver_id() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.Feed.receiver_id)
  return receiver_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HeaderQueryResponse_Feed::set_receiver_id(const ::std::string& value) {
  
  receiver_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.HeaderQueryResponse.Feed.receiver_id)
}
void HeaderQueryResponse_Feed::set_receiver_id(const char* value) {
  
  receiver_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.response.HeaderQueryResponse.Feed.receiver_id)
}
void HeaderQueryResponse_Feed::set_receiver_id(const char* value, size_t size) {
  
  receiver_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.response.HeaderQueryResponse.Feed.receiver_id)
}
::std::string* HeaderQueryResponse_Feed::mutable_receiver_id() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.HeaderQueryResponse.Feed.receiver_id)
  return receiver_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HeaderQueryResponse_Feed::release_receiver_id() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.HeaderQueryResponse.Feed.receiver_id)
  
  return receiver_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HeaderQueryResponse_Feed::set_allocated_receiver_id(::std::string* receiver_id) {
  if (receiver_id != NULL) {
    
  } else {
    
  }
  receiver_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receiver_id);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.HeaderQueryResponse.Feed.receiver_id)
}

// repeated .agrirouter.feed.response.HeaderQueryResponse.Header headers = 3;
int HeaderQueryResponse_Feed::headers_size() const {
  return headers_.size();
}
void HeaderQueryResponse_Feed::clear_headers() {
  headers_.Clear();
}
const ::agrirouter::feed::response::HeaderQueryResponse_Header& HeaderQueryResponse_Feed::headers(int index) const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.Feed.headers)
  return headers_.Get(index);
}
::agrirouter::feed::response::HeaderQueryResponse_Header* HeaderQueryResponse_Feed::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.HeaderQueryResponse.Feed.headers)
  return headers_.Mutable(index);
}
::agrirouter::feed::response::HeaderQueryResponse_Header* HeaderQueryResponse_Feed::add_headers() {
  // @@protoc_insertion_point(field_add:agrirouter.feed.response.HeaderQueryResponse.Feed.headers)
  return headers_.Add();
}
::google::protobuf::RepeatedPtrField< ::agrirouter::feed::response::HeaderQueryResponse_Header >*
HeaderQueryResponse_Feed::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:agrirouter.feed.response.HeaderQueryResponse.Feed.headers)
  return &headers_;
}
const ::google::protobuf::RepeatedPtrField< ::agrirouter::feed::response::HeaderQueryResponse_Header >&
HeaderQueryResponse_Feed::headers() const {
  // @@protoc_insertion_point(field_list:agrirouter.feed.response.HeaderQueryResponse.Feed.headers)
  return headers_;
}

inline const HeaderQueryResponse_Feed* HeaderQueryResponse_Feed::internal_default_instance() {
  return &HeaderQueryResponse_Feed_default_instance_.get();
}
// -------------------------------------------------------------------

// HeaderQueryResponse

// optional .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
bool HeaderQueryResponse::has_querymetrics() const {
  return this != internal_default_instance() && querymetrics_ != NULL;
}
void HeaderQueryResponse::clear_querymetrics() {
  if (GetArenaNoVirtual() == NULL && querymetrics_ != NULL) delete querymetrics_;
  querymetrics_ = NULL;
}
const ::agrirouter::feed::response::QueryMetrics& HeaderQueryResponse::querymetrics() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.queryMetrics)
  return querymetrics_ != NULL ? *querymetrics_
                         : *::agrirouter::feed::response::QueryMetrics::internal_default_instance();
}
::agrirouter::feed::response::QueryMetrics* HeaderQueryResponse::mutable_querymetrics() {
  
  if (querymetrics_ == NULL) {
    querymetrics_ = new ::agrirouter::feed::response::QueryMetrics;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.HeaderQueryResponse.queryMetrics)
  return querymetrics_;
}
::agrirouter::feed::response::QueryMetrics* HeaderQueryResponse::release_querymetrics() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.HeaderQueryResponse.queryMetrics)
  
  ::agrirouter::feed::response::QueryMetrics* temp = querymetrics_;
  querymetrics_ = NULL;
  return temp;
}
void HeaderQueryResponse::set_allocated_querymetrics(::agrirouter::feed::response::QueryMetrics* querymetrics) {
  delete querymetrics_;
  querymetrics_ = querymetrics;
  if (querymetrics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.HeaderQueryResponse.queryMetrics)
}

// optional .agrirouter.feed.response.Page page = 2;
bool HeaderQueryResponse::has_page() const {
  return this != internal_default_instance() && page_ != NULL;
}
void HeaderQueryResponse::clear_page() {
  if (GetArenaNoVirtual() == NULL && page_ != NULL) delete page_;
  page_ = NULL;
}
const ::agrirouter::feed::response::Page& HeaderQueryResponse::page() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.page)
  return page_ != NULL ? *page_
                         : *::agrirouter::feed::response::Page::internal_default_instance();
}
::agrirouter::feed::response::Page* HeaderQueryResponse::mutable_page() {
  
  if (page_ == NULL) {
    page_ = new ::agrirouter::feed::response::Page;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.HeaderQueryResponse.page)
  return page_;
}
::agrirouter::feed::response::Page* HeaderQueryResponse::release_page() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.HeaderQueryResponse.page)
  
  ::agrirouter::feed::response::Page* temp = page_;
  page_ = NULL;
  return temp;
}
void HeaderQueryResponse::set_allocated_page(::agrirouter::feed::response::Page* page) {
  delete page_;
  page_ = page;
  if (page) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.HeaderQueryResponse.page)
}

// repeated .agrirouter.commons.ChunkComponent chunk_contexts = 3;
int HeaderQueryResponse::chunk_contexts_size() const {
  return chunk_contexts_.size();
}
void HeaderQueryResponse::clear_chunk_contexts() {
  chunk_contexts_.Clear();
}
const ::agrirouter::commons::ChunkComponent& HeaderQueryResponse::chunk_contexts(int index) const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.chunk_contexts)
  return chunk_contexts_.Get(index);
}
::agrirouter::commons::ChunkComponent* HeaderQueryResponse::mutable_chunk_contexts(int index) {
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.HeaderQueryResponse.chunk_contexts)
  return chunk_contexts_.Mutable(index);
}
::agrirouter::commons::ChunkComponent* HeaderQueryResponse::add_chunk_contexts() {
  // @@protoc_insertion_point(field_add:agrirouter.feed.response.HeaderQueryResponse.chunk_contexts)
  return chunk_contexts_.Add();
}
::google::protobuf::RepeatedPtrField< ::agrirouter::commons::ChunkComponent >*
HeaderQueryResponse::mutable_chunk_contexts() {
  // @@protoc_insertion_point(field_mutable_list:agrirouter.feed.response.HeaderQueryResponse.chunk_contexts)
  return &chunk_contexts_;
}
const ::google::protobuf::RepeatedPtrField< ::agrirouter::commons::ChunkComponent >&
HeaderQueryResponse::chunk_contexts() const {
  // @@protoc_insertion_point(field_list:agrirouter.feed.response.HeaderQueryResponse.chunk_contexts)
  return chunk_contexts_;
}

// repeated .agrirouter.feed.response.HeaderQueryResponse.Feed feed = 4;
int HeaderQueryResponse::feed_size() const {
  return feed_.size();
}
void HeaderQueryResponse::clear_feed() {
  feed_.Clear();
}
const ::agrirouter::feed::response::HeaderQueryResponse_Feed& HeaderQueryResponse::feed(int index) const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.feed)
  return feed_.Get(index);
}
::agrirouter::feed::response::HeaderQueryResponse_Feed* HeaderQueryResponse::mutable_feed(int index) {
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.HeaderQueryResponse.feed)
  return feed_.Mutable(index);
}
::agrirouter::feed::response::HeaderQueryResponse_Feed* HeaderQueryResponse::add_feed() {
  // @@protoc_insertion_point(field_add:agrirouter.feed.response.HeaderQueryResponse.feed)
  return feed_.Add();
}
::google::protobuf::RepeatedPtrField< ::agrirouter::feed::response::HeaderQueryResponse_Feed >*
HeaderQueryResponse::mutable_feed() {
  // @@protoc_insertion_point(field_mutable_list:agrirouter.feed.response.HeaderQueryResponse.feed)
  return &feed_;
}
const ::google::protobuf::RepeatedPtrField< ::agrirouter::feed::response::HeaderQueryResponse_Feed >&
HeaderQueryResponse::feed() const {
  // @@protoc_insertion_point(field_list:agrirouter.feed.response.HeaderQueryResponse.feed)
  return feed_;
}

// repeated string pending_message_ids = 5;
int HeaderQueryResponse::pending_message_ids_size() const {
  return pending_message_ids_.size();
}
void HeaderQueryResponse::clear_pending_message_ids() {
  pending_message_ids_.Clear();
}
const ::std::string& HeaderQueryResponse::pending_message_ids(int index) const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.pending_message_ids)
  return pending_message_ids_.Get(index);
}
::std::string* HeaderQueryResponse::mutable_pending_message_ids(int index) {
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.HeaderQueryResponse.pending_message_ids)
  return pending_message_ids_.Mutable(index);
}
void HeaderQueryResponse::set_pending_message_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.HeaderQueryResponse.pending_message_ids)
  pending_message_ids_.Mutable(index)->assign(value);
}
void HeaderQueryResponse::set_pending_message_ids(int index, const char* value) {
  pending_message_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.response.HeaderQueryResponse.pending_message_ids)
}
void HeaderQueryResponse::set_pending_message_ids(int index, const char* value, size_t size) {
  pending_message_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.response.HeaderQueryResponse.pending_message_ids)
}
::std::string* HeaderQueryResponse::add_pending_message_ids() {
  // @@protoc_insertion_point(field_add_mutable:agrirouter.feed.response.HeaderQueryResponse.pending_message_ids)
  return pending_message_ids_.Add();
}
void HeaderQueryResponse::add_pending_message_ids(const ::std::string& value) {
  pending_message_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:agrirouter.feed.response.HeaderQueryResponse.pending_message_ids)
}
void HeaderQueryResponse::add_pending_message_ids(const char* value) {
  pending_message_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:agrirouter.feed.response.HeaderQueryResponse.pending_message_ids)
}
void HeaderQueryResponse::add_pending_message_ids(const char* value, size_t size) {
  pending_message_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:agrirouter.feed.response.HeaderQueryResponse.pending_message_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
HeaderQueryResponse::pending_message_ids() const {
  // @@protoc_insertion_point(field_list:agrirouter.feed.response.HeaderQueryResponse.pending_message_ids)
  return pending_message_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
HeaderQueryResponse::mutable_pending_message_ids() {
  // @@protoc_insertion_point(field_mutable_list:agrirouter.feed.response.HeaderQueryResponse.pending_message_ids)
  return &pending_message_ids_;
}

inline const HeaderQueryResponse* HeaderQueryResponse::internal_default_instance() {
  return &HeaderQueryResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageQueryResponse_Header::kReceiverIdFieldNumber;
const int MessageQueryResponse_Header::kTechnicalMessageTypeFieldNumber;
const int MessageQueryResponse_Header::kTeamSetContextIdFieldNumber;
const int MessageQueryResponse_Header::kChunkContextFieldNumber;
const int MessageQueryResponse_Header::kPayloadSizeFieldNumber;
const int MessageQueryResponse_Header::kSentTimestampFieldNumber;
const int MessageQueryResponse_Header::kSequenceNumberFieldNumber;
const int MessageQueryResponse_Header::kSenderIdFieldNumber;
const int MessageQueryResponse_Header::kCreatedAtFieldNumber;
const int MessageQueryResponse_Header::kMessageIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageQueryResponse_Header::MessageQueryResponse_Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.feed.response.MessageQueryResponse.Header)
}

void MessageQueryResponse_Header::InitAsDefaultInstance() {
  chunk_context_ = const_cast< ::agrirouter::commons::ChunkComponent*>(
      ::agrirouter::commons::ChunkComponent::internal_default_instance());
  sent_timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  created_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}

MessageQueryResponse_Header::MessageQueryResponse_Header(const MessageQueryResponse_Header& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agrirouter.feed.response.MessageQueryResponse.Header)
}

void MessageQueryResponse_Header::SharedCtor() {
  receiver_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  technical_message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_set_context_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chunk_context_ = NULL;
  sent_timestamp_ = NULL;
  created_at_ = NULL;
  ::memset(&payload_size_, 0, reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&payload_size_) + sizeof(sequence_number_));
  _cached_size_ = 0;
}

MessageQueryResponse_Header::~MessageQueryResponse_Header() {
  // @@protoc_insertion_point(destructor:agrirouter.feed.response.MessageQueryResponse.Header)
  SharedDtor();
}

void MessageQueryResponse_Header::SharedDtor() {
  receiver_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  technical_message_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_set_context_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &MessageQueryResponse_Header_default_instance_.get()) {
    delete chunk_context_;
    delete sent_timestamp_;
    delete created_at_;
  }
}

void MessageQueryResponse_Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageQueryResponse_Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageQueryResponse_Header_descriptor_;
}

const MessageQueryResponse_Header& MessageQueryResponse_Header::default_instance() {
  protobuf_InitDefaults_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MessageQueryResponse_Header> MessageQueryResponse_Header_default_instance_;

MessageQueryResponse_Header* MessageQueryResponse_Header::New(::google::protobuf::Arena* arena) const {
  MessageQueryResponse_Header* n = new MessageQueryResponse_Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageQueryResponse_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.feed.response.MessageQueryResponse.Header)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MessageQueryResponse_Header, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MessageQueryResponse_Header*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(payload_size_, sequence_number_);
  receiver_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  technical_message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_set_context_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && chunk_context_ != NULL) delete chunk_context_;
  chunk_context_ = NULL;
  if (GetArenaNoVirtual() == NULL && sent_timestamp_ != NULL) delete sent_timestamp_;
  sent_timestamp_ = NULL;
  sender_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && created_at_ != NULL) delete created_at_;
  created_at_ = NULL;
  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool MessageQueryResponse_Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.feed.response.MessageQueryResponse.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string receiver_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiver_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->receiver_id().data(), this->receiver_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.response.MessageQueryResponse.Header.receiver_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_technical_message_type;
        break;
      }

      // optional string technical_message_type = 2;
      case 2: {
        if (tag == 18) {
         parse_technical_message_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_technical_message_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->technical_message_type().data(), this->technical_message_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.response.MessageQueryResponse.Header.technical_message_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_team_set_context_id;
        break;
      }

      // optional string team_set_context_id = 3;
      case 3: {
        if (tag == 26) {
         parse_team_set_context_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_set_context_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->team_set_context_id().data(), this->team_set_context_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.response.MessageQueryResponse.Header.team_set_context_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_chunk_context;
        break;
      }

      // optional .agrirouter.commons.ChunkComponent chunk_context = 4;
      case 4: {
        if (tag == 34) {
         parse_chunk_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chunk_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_payload_size;
        break;
      }

      // optional int64 payload_size = 5;
      case 5: {
        if (tag == 40) {
         parse_payload_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &payload_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sent_timestamp;
        break;
      }

      // optional .google.protobuf.Timestamp sent_timestamp = 6;
      case 6: {
        if (tag == 50) {
         parse_sent_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sent_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sequence_number;
        break;
      }

      // optional int64 sequence_number = 7;
      case 7: {
        if (tag == 56) {
         parse_sequence_number:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sender_id;
        break;
      }

      // optional string sender_id = 8;
      case 8: {
        if (tag == 66) {
         parse_sender_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sender_id().data(), this->sender_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.response.MessageQueryResponse.Header.sender_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_created_at;
        break;
      }

      // optional .google.protobuf.Timestamp created_at = 9;
      case 9: {
        if (tag == 74) {
         parse_created_at:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_created_at()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_message_id;
        break;
      }

      // optional string message_id = 10;
      case 10: {
        if (tag == 82) {
         parse_message_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message_id().data(), this->message_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.response.MessageQueryResponse.Header.message_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.feed.response.MessageQueryResponse.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.feed.response.MessageQueryResponse.Header)
  return false;
#undef DO_
}

void MessageQueryResponse_Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.feed.response.MessageQueryResponse.Header)
  // optional string receiver_id = 1;
  if (this->receiver_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->receiver_id().data(), this->receiver_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.MessageQueryResponse.Header.receiver_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->receiver_id(), output);
  }

  // optional string technical_message_type = 2;
  if (this->technical_message_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->technical_message_type().data(), this->technical_message_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.MessageQueryResponse.Header.technical_message_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->technical_message_type(), output);
  }

  // optional string team_set_context_id = 3;
  if (this->team_set_context_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team_set_context_id().data(), this->team_set_context_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.MessageQueryResponse.Header.team_set_context_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team_set_context_id(), output);
  }

  // optional .agrirouter.commons.ChunkComponent chunk_context = 4;
  if (this->has_chunk_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->chunk_context_, output);
  }

  // optional int64 payload_size = 5;
  if (this->payload_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->payload_size(), output);
  }

  // optional .google.protobuf.Timestamp sent_timestamp = 6;
  if (this->has_sent_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->sent_timestamp_, output);
  }

  // optional int64 sequence_number = 7;
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->sequence_number(), output);
  }

  // optional string sender_id = 8;
  if (this->sender_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender_id().data(), this->sender_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.MessageQueryResponse.Header.sender_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->sender_id(), output);
  }

  // optional .google.protobuf.Timestamp created_at = 9;
  if (this->has_created_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->created_at_, output);
  }

  // optional string message_id = 10;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), this->message_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.MessageQueryResponse.Header.message_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->message_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:agrirouter.feed.response.MessageQueryResponse.Header)
}

::google::protobuf::uint8* MessageQueryResponse_Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.feed.response.MessageQueryResponse.Header)
  // optional string receiver_id = 1;
  if (this->receiver_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->receiver_id().data(), this->receiver_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.MessageQueryResponse.Header.receiver_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->receiver_id(), target);
  }

  // optional string technical_message_type = 2;
  if (this->technical_message_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->technical_message_type().data(), this->technical_message_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.MessageQueryResponse.Header.technical_message_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->technical_message_type(), target);
  }

  // optional string team_set_context_id = 3;
  if (this->team_set_context_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team_set_context_id().data(), this->team_set_context_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.MessageQueryResponse.Header.team_set_context_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_set_context_id(), target);
  }

  // optional .agrirouter.commons.ChunkComponent chunk_context = 4;
  if (this->has_chunk_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->chunk_context_, false, target);
  }

  // optional int64 payload_size = 5;
  if (this->payload_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->payload_size(), target);
  }

  // optional .google.protobuf.Timestamp sent_timestamp = 6;
  if (this->has_sent_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->sent_timestamp_, false, target);
  }

  // optional int64 sequence_number = 7;
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->sequence_number(), target);
  }

  // optional string sender_id = 8;
  if (this->sender_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender_id().data(), this->sender_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.MessageQueryResponse.Header.sender_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sender_id(), target);
  }

  // optional .google.protobuf.Timestamp created_at = 9;
  if (this->has_created_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->created_at_, false, target);
  }

  // optional string message_id = 10;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), this->message_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.MessageQueryResponse.Header.message_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->message_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.feed.response.MessageQueryResponse.Header)
  return target;
}

size_t MessageQueryResponse_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.feed.response.MessageQueryResponse.Header)
  size_t total_size = 0;

  // optional string receiver_id = 1;
  if (this->receiver_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->receiver_id());
  }

  // optional string technical_message_type = 2;
  if (this->technical_message_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->technical_message_type());
  }

  // optional string team_set_context_id = 3;
  if (this->team_set_context_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->team_set_context_id());
  }

  // optional .agrirouter.commons.ChunkComponent chunk_context = 4;
  if (this->has_chunk_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->chunk_context_);
  }

  // optional int64 payload_size = 5;
  if (this->payload_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->payload_size());
  }

  // optional .google.protobuf.Timestamp sent_timestamp = 6;
  if (this->has_sent_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sent_timestamp_);
  }

  // optional int64 sequence_number = 7;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence_number());
  }

  // optional string sender_id = 8;
  if (this->sender_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sender_id());
  }

  // optional .google.protobuf.Timestamp created_at = 9;
  if (this->has_created_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->created_at_);
  }

  // optional string message_id = 10;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageQueryResponse_Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.feed.response.MessageQueryResponse.Header)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MessageQueryResponse_Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageQueryResponse_Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.feed.response.MessageQueryResponse.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.feed.response.MessageQueryResponse.Header)
    UnsafeMergeFrom(*source);
  }
}

void MessageQueryResponse_Header::MergeFrom(const MessageQueryResponse_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.feed.response.MessageQueryResponse.Header)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MessageQueryResponse_Header::UnsafeMergeFrom(const MessageQueryResponse_Header& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.receiver_id().size() > 0) {

    receiver_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receiver_id_);
  }
  if (from.technical_message_type().size() > 0) {

    technical_message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.technical_message_type_);
  }
  if (from.team_set_context_id().size() > 0) {

    team_set_context_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_set_context_id_);
  }
  if (from.has_chunk_context()) {
    mutable_chunk_context()->::agrirouter::commons::ChunkComponent::MergeFrom(from.chunk_context());
  }
  if (from.payload_size() != 0) {
    set_payload_size(from.payload_size());
  }
  if (from.has_sent_timestamp()) {
    mutable_sent_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.sent_timestamp());
  }
  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
  if (from.sender_id().size() > 0) {

    sender_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_id_);
  }
  if (from.has_created_at()) {
    mutable_created_at()->::google::protobuf::Timestamp::MergeFrom(from.created_at());
  }
  if (from.message_id().size() > 0) {

    message_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_id_);
  }
}

void MessageQueryResponse_Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.feed.response.MessageQueryResponse.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageQueryResponse_Header::CopyFrom(const MessageQueryResponse_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.feed.response.MessageQueryResponse.Header)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MessageQueryResponse_Header::IsInitialized() const {

  return true;
}

void MessageQueryResponse_Header::Swap(MessageQueryResponse_Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageQueryResponse_Header::InternalSwap(MessageQueryResponse_Header* other) {
  receiver_id_.Swap(&other->receiver_id_);
  technical_message_type_.Swap(&other->technical_message_type_);
  team_set_context_id_.Swap(&other->team_set_context_id_);
  std::swap(chunk_context_, other->chunk_context_);
  std::swap(payload_size_, other->payload_size_);
  std::swap(sent_timestamp_, other->sent_timestamp_);
  std::swap(sequence_number_, other->sequence_number_);
  sender_id_.Swap(&other->sender_id_);
  std::swap(created_at_, other->created_at_);
  message_id_.Swap(&other->message_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageQueryResponse_Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageQueryResponse_Header_descriptor_;
  metadata.reflection = MessageQueryResponse_Header_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageQueryResponse_FeedMessage::kHeaderFieldNumber;
const int MessageQueryResponse_FeedMessage::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageQueryResponse_FeedMessage::MessageQueryResponse_FeedMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
}

void MessageQueryResponse_FeedMessage::InitAsDefaultInstance() {
  header_ = const_cast< ::agrirouter::feed::response::MessageQueryResponse_Header*>(
      ::agrirouter::feed::response::MessageQueryResponse_Header::internal_default_instance());
  content_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}

MessageQueryResponse_FeedMessage::MessageQueryResponse_FeedMessage(const MessageQueryResponse_FeedMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
}

void MessageQueryResponse_FeedMessage::SharedCtor() {
  header_ = NULL;
  content_ = NULL;
  _cached_size_ = 0;
}

MessageQueryResponse_FeedMessage::~MessageQueryResponse_FeedMessage() {
  // @@protoc_insertion_point(destructor:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
  SharedDtor();
}

void MessageQueryResponse_FeedMessage::SharedDtor() {
  if (this != &MessageQueryResponse_FeedMessage_default_instance_.get()) {
    delete header_;
    delete content_;
  }
}

void MessageQueryResponse_FeedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageQueryResponse_FeedMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageQueryResponse_FeedMessage_descriptor_;
}

const MessageQueryResponse_FeedMessage& MessageQueryResponse_FeedMessage::default_instance() {
  protobuf_InitDefaults_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MessageQueryResponse_FeedMessage> MessageQueryResponse_FeedMessage_default_instance_;

MessageQueryResponse_FeedMessage* MessageQueryResponse_FeedMessage::New(::google::protobuf::Arena* arena) const {
  MessageQueryResponse_FeedMessage* n = new MessageQueryResponse_FeedMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageQueryResponse_FeedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && content_ != NULL) delete content_;
  content_ = NULL;
}

bool MessageQueryResponse_FeedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .agrirouter.feed.response.MessageQueryResponse.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional .google.protobuf.Any content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
  return false;
#undef DO_
}

void MessageQueryResponse_FeedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
  // optional .agrirouter.feed.response.MessageQueryResponse.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .google.protobuf.Any content = 2;
  if (this->has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->content_, output);
  }

  // @@protoc_insertion_point(serialize_end:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
}

::google::protobuf::uint8* MessageQueryResponse_FeedMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
  // optional .agrirouter.feed.response.MessageQueryResponse.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .google.protobuf.Any content = 2;
  if (this->has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->content_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
  return target;
}

size_t MessageQueryResponse_FeedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
  size_t total_size = 0;

  // optional .agrirouter.feed.response.MessageQueryResponse.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional .google.protobuf.Any content = 2;
  if (this->has_content()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->content_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageQueryResponse_FeedMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MessageQueryResponse_FeedMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageQueryResponse_FeedMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
    UnsafeMergeFrom(*source);
  }
}

void MessageQueryResponse_FeedMessage::MergeFrom(const MessageQueryResponse_FeedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MessageQueryResponse_FeedMessage::UnsafeMergeFrom(const MessageQueryResponse_FeedMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::agrirouter::feed::response::MessageQueryResponse_Header::MergeFrom(from.header());
  }
  if (from.has_content()) {
    mutable_content()->::google::protobuf::Any::MergeFrom(from.content());
  }
}

void MessageQueryResponse_FeedMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageQueryResponse_FeedMessage::CopyFrom(const MessageQueryResponse_FeedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MessageQueryResponse_FeedMessage::IsInitialized() const {

  return true;
}

void MessageQueryResponse_FeedMessage::Swap(MessageQueryResponse_FeedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageQueryResponse_FeedMessage::InternalSwap(MessageQueryResponse_FeedMessage* other) {
  std::swap(header_, other->header_);
  std::swap(content_, other->content_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageQueryResponse_FeedMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageQueryResponse_FeedMessage_descriptor_;
  metadata.reflection = MessageQueryResponse_FeedMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageQueryResponse::kQueryMetricsFieldNumber;
const int MessageQueryResponse::kPageFieldNumber;
const int MessageQueryResponse::kMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageQueryResponse::MessageQueryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.feed.response.MessageQueryResponse)
}

void MessageQueryResponse::InitAsDefaultInstance() {
  querymetrics_ = const_cast< ::agrirouter::feed::response::QueryMetrics*>(
      ::agrirouter::feed::response::QueryMetrics::internal_default_instance());
  page_ = const_cast< ::agrirouter::feed::response::Page*>(
      ::agrirouter::feed::response::Page::internal_default_instance());
}

MessageQueryResponse::MessageQueryResponse(const MessageQueryResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agrirouter.feed.response.MessageQueryResponse)
}

void MessageQueryResponse::SharedCtor() {
  querymetrics_ = NULL;
  page_ = NULL;
  _cached_size_ = 0;
}

MessageQueryResponse::~MessageQueryResponse() {
  // @@protoc_insertion_point(destructor:agrirouter.feed.response.MessageQueryResponse)
  SharedDtor();
}

void MessageQueryResponse::SharedDtor() {
  if (this != &MessageQueryResponse_default_instance_.get()) {
    delete querymetrics_;
    delete page_;
  }
}

void MessageQueryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageQueryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageQueryResponse_descriptor_;
}

const MessageQueryResponse& MessageQueryResponse::default_instance() {
  protobuf_InitDefaults_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MessageQueryResponse> MessageQueryResponse_default_instance_;

MessageQueryResponse* MessageQueryResponse::New(::google::protobuf::Arena* arena) const {
  MessageQueryResponse* n = new MessageQueryResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.feed.response.MessageQueryResponse)
  if (GetArenaNoVirtual() == NULL && querymetrics_ != NULL) delete querymetrics_;
  querymetrics_ = NULL;
  if (GetArenaNoVirtual() == NULL && page_ != NULL) delete page_;
  page_ = NULL;
  messages_.Clear();
}

bool MessageQueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.feed.response.MessageQueryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_querymetrics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_page;
        break;
      }

      // optional .agrirouter.feed.response.Page page = 2;
      case 2: {
        if (tag == 18) {
         parse_page:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_page()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_messages;
        break;
      }

      // repeated .agrirouter.feed.response.MessageQueryResponse.FeedMessage messages = 3;
      case 3: {
        if (tag == 26) {
         parse_messages:
          DO_(input->IncrementRecursionDepth());
         parse_loop_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_messages;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.feed.response.MessageQueryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.feed.response.MessageQueryResponse)
  return false;
#undef DO_
}

void MessageQueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.feed.response.MessageQueryResponse)
  // optional .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
  if (this->has_querymetrics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->querymetrics_, output);
  }

  // optional .agrirouter.feed.response.Page page = 2;
  if (this->has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->page_, output);
  }

  // repeated .agrirouter.feed.response.MessageQueryResponse.FeedMessage messages = 3;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->messages(i), output);
  }

  // @@protoc_insertion_point(serialize_end:agrirouter.feed.response.MessageQueryResponse)
}

::google::protobuf::uint8* MessageQueryResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.feed.response.MessageQueryResponse)
  // optional .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
  if (this->has_querymetrics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->querymetrics_, false, target);
  }

  // optional .agrirouter.feed.response.Page page = 2;
  if (this->has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->page_, false, target);
  }

  // repeated .agrirouter.feed.response.MessageQueryResponse.FeedMessage messages = 3;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->messages(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.feed.response.MessageQueryResponse)
  return target;
}

size_t MessageQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.feed.response.MessageQueryResponse)
  size_t total_size = 0;

  // optional .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
  if (this->has_querymetrics()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->querymetrics_);
  }

  // optional .agrirouter.feed.response.Page page = 2;
  if (this->has_page()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->page_);
  }

  // repeated .agrirouter.feed.response.MessageQueryResponse.FeedMessage messages = 3;
  {
    unsigned int count = this->messages_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->messages(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageQueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.feed.response.MessageQueryResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MessageQueryResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageQueryResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.feed.response.MessageQueryResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.feed.response.MessageQueryResponse)
    UnsafeMergeFrom(*source);
  }
}

void MessageQueryResponse::MergeFrom(const MessageQueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.feed.response.MessageQueryResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MessageQueryResponse::UnsafeMergeFrom(const MessageQueryResponse& from) {
  GOOGLE_DCHECK(&from != this);
  messages_.MergeFrom(from.messages_);
  if (from.has_querymetrics()) {
    mutable_querymetrics()->::agrirouter::feed::response::QueryMetrics::MergeFrom(from.querymetrics());
  }
  if (from.has_page()) {
    mutable_page()->::agrirouter::feed::response::Page::MergeFrom(from.page());
  }
}

void MessageQueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.feed.response.MessageQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageQueryResponse::CopyFrom(const MessageQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.feed.response.MessageQueryResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MessageQueryResponse::IsInitialized() const {

  return true;
}

void MessageQueryResponse::Swap(MessageQueryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageQueryResponse::InternalSwap(MessageQueryResponse* other) {
  std::swap(querymetrics_, other->querymetrics_);
  std::swap(page_, other->page_);
  messages_.UnsafeArenaSwap(&other->messages_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageQueryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageQueryResponse_descriptor_;
  metadata.reflection = MessageQueryResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageQueryResponse_Header

// optional string receiver_id = 1;
void MessageQueryResponse_Header::clear_receiver_id() {
  receiver_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MessageQueryResponse_Header::receiver_id() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.MessageQueryResponse.Header.receiver_id)
  return receiver_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MessageQueryResponse_Header::set_receiver_id(const ::std::string& value) {
  
  receiver_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.MessageQueryResponse.Header.receiver_id)
}
void MessageQueryResponse_Header::set_receiver_id(const char* value) {
  
  receiver_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.response.MessageQueryResponse.Header.receiver_id)
}
void MessageQueryResponse_Header::set_receiver_id(const char* value, size_t size) {
  
  receiver_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.response.MessageQueryResponse.Header.receiver_id)
}
::std::string* MessageQueryResponse_Header::mutable_receiver_id() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.MessageQueryResponse.Header.receiver_id)
  return receiver_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MessageQueryResponse_Header::release_receiver_id() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.MessageQueryResponse.Header.receiver_id)
  
  return receiver_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MessageQueryResponse_Header::set_allocated_receiver_id(::std::string* receiver_id) {
  if (receiver_id != NULL) {
    
  } else {
    
  }
  receiver_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receiver_id);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.MessageQueryResponse.Header.receiver_id)
}

// optional string technical_message_type = 2;
void MessageQueryResponse_Header::clear_technical_message_type() {
  technical_message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MessageQueryResponse_Header::technical_message_type() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.MessageQueryResponse.Header.technical_message_type)
  return technical_message_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MessageQueryResponse_Header::set_technical_message_type(const ::std::string& value) {
  
  technical_message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.MessageQueryResponse.Header.technical_message_type)
}
void MessageQueryResponse_Header::set_technical_message_type(const char* value) {
  
  technical_message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.response.MessageQueryResponse.Header.technical_message_type)
}
void MessageQueryResponse_Header::set_technical_message_type(const char* value, size_t size) {
  
  technical_message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.response.MessageQueryResponse.Header.technical_message_type)
}
::std::string* MessageQueryResponse_Header::mutable_technical_message_type() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.MessageQueryResponse.Header.technical_message_type)
  return technical_message_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MessageQueryResponse_Header::release_technical_message_type() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.MessageQueryResponse.Header.technical_message_type)
  
  return technical_message_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MessageQueryResponse_Header::set_allocated_technical_message_type(::std::string* technical_message_type) {
  if (technical_message_type != NULL) {
    
  } else {
    
  }
  technical_message_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), technical_message_type);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.MessageQueryResponse.Header.technical_message_type)
}

// optional string team_set_context_id = 3;
void MessageQueryResponse_Header::clear_team_set_context_id() {
  team_set_context_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MessageQueryResponse_Header::team_set_context_id() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.MessageQueryResponse.Header.team_set_context_id)
  return team_set_context_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MessageQueryResponse_Header::set_team_set_context_id(const ::std::string& value) {
  
  team_set_context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.MessageQueryResponse.Header.team_set_context_id)
}
void MessageQueryResponse_Header::set_team_set_context_id(const char* value) {
  
  team_set_context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.response.MessageQueryResponse.Header.team_set_context_id)
}
void MessageQueryResponse_Header::set_team_set_context_id(const char* value, size_t size) {
  
  team_set_context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.response.MessageQueryResponse.Header.team_set_context_id)
}
::std::string* MessageQueryResponse_Header::mutable_team_set_context_id() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.MessageQueryResponse.Header.team_set_context_id)
  return team_set_context_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MessageQueryResponse_Header::release_team_set_context_id() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.MessageQueryResponse.Header.team_set_context_id)
  
  return team_set_context_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MessageQueryResponse_Header::set_allocated_team_set_context_id(::std::string* team_set_context_id) {
  if (team_set_context_id != NULL) {
    
  } else {
    
  }
  team_set_context_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_set_context_id);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.MessageQueryResponse.Header.team_set_context_id)
}

// optional .agrirouter.commons.ChunkComponent chunk_context = 4;
bool MessageQueryResponse_Header::has_chunk_context() const {
  return this != internal_default_instance() && chunk_context_ != NULL;
}
void MessageQueryResponse_Header::clear_chunk_context() {
  if (GetArenaNoVirtual() == NULL && chunk_context_ != NULL) delete chunk_context_;
  chunk_context_ = NULL;
}
const ::agrirouter::commons::ChunkComponent& MessageQueryResponse_Header::chunk_context() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.MessageQueryResponse.Header.chunk_context)
  return chunk_context_ != NULL ? *chunk_context_
                         : *::agrirouter::commons::ChunkComponent::internal_default_instance();
}
::agrirouter::commons::ChunkComponent* MessageQueryResponse_Header::mutable_chunk_context() {
  
  if (chunk_context_ == NULL) {
    chunk_context_ = new ::agrirouter::commons::ChunkComponent;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.MessageQueryResponse.Header.chunk_context)
  return chunk_context_;
}
::agrirouter::commons::ChunkComponent* MessageQueryResponse_Header::release_chunk_context() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.MessageQueryResponse.Header.chunk_context)
  
  ::agrirouter::commons::ChunkComponent* temp = chunk_context_;
  chunk_context_ = NULL;
  return temp;
}
void MessageQueryResponse_Header::set_allocated_chunk_context(::agrirouter::commons::ChunkComponent* chunk_context) {
  delete chunk_context_;
  chunk_context_ = chunk_context;
  if (chunk_context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.MessageQueryResponse.Header.chunk_context)
}

// optional int64 payload_size = 5;
void MessageQueryResponse_Header::clear_payload_size() {
  payload_size_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MessageQueryResponse_Header::payload_size() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.MessageQueryResponse.Header.payload_size)
  return payload_size_;
}
void MessageQueryResponse_Header::set_payload_size(::google::protobuf::int64 value) {
  
  payload_size_ = value;
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.MessageQueryResponse.Header.payload_size)
}

// optional .google.protobuf.Timestamp sent_timestamp = 6;
bool MessageQueryResponse_Header::has_sent_timestamp() const {
  return this != internal_default_instance() && sent_timestamp_ != NULL;
}
void MessageQueryResponse_Header::clear_sent_timestamp() {
  if (GetArenaNoVirtual() == NULL && sent_timestamp_ != NULL) delete sent_timestamp_;
  sent_timestamp_ = NULL;
}
const ::google::protobuf::Timestamp& MessageQueryResponse_Header::sent_timestamp() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.MessageQueryResponse.Header.sent_timestamp)
  return sent_timestamp_ != NULL ? *sent_timestamp_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* MessageQueryResponse_Header::mutable_sent_timestamp() {
  
  if (sent_timestamp_ == NULL) {
    sent_timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.MessageQueryResponse.Header.sent_timestamp)
  return sent_timestamp_;
}
::google::protobuf::Timestamp* MessageQueryResponse_Header::release_sent_timestamp() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.MessageQueryResponse.Header.sent_timestamp)
  
  ::google::protobuf::Timestamp* temp = sent_timestamp_;
  sent_timestamp_ = NULL;
  return temp;
}
void MessageQueryResponse_Header::set_allocated_sent_timestamp(::google::protobuf::Timestamp* sent_timestamp) {
  delete sent_timestamp_;
  if (sent_timestamp != NULL && sent_timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_sent_timestamp = new ::google::protobuf::Timestamp;
    new_sent_timestamp->CopyFrom(*sent_timestamp);
    sent_timestamp = new_sent_timestamp;
  }
  sent_timestamp_ = sent_timestamp;
  if (sent_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.MessageQueryResponse.Header.sent_timestamp)
}

// optional int64 sequence_number = 7;
void MessageQueryResponse_Header::clear_sequence_number() {
  sequence_number_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MessageQueryResponse_Header::sequence_number() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.MessageQueryResponse.Header.sequence_number)
  return sequence_number_;
}
void MessageQueryResponse_Header::set_sequence_number(::google::protobuf::int64 value) {
  
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.MessageQueryResponse.Header.sequence_number)
}

// optional string sender_id = 8;
void MessageQueryResponse_Header::clear_sender_id() {
  sender_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MessageQueryResponse_Header::sender_id() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.MessageQueryResponse.Header.sender_id)
  return sender_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MessageQueryResponse_Header::set_sender_id(const ::std::string& value) {
  
  sender_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.MessageQueryResponse.Header.sender_id)
}
void MessageQueryResponse_Header::set_sender_id(const char* value) {
  
  sender_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.response.MessageQueryResponse.Header.sender_id)
}
void MessageQueryResponse_Header::set_sender_id(const char* value, size_t size) {
  
  sender_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.response.MessageQueryResponse.Header.sender_id)
}
::std::string* MessageQueryResponse_Header::mutable_sender_id() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.MessageQueryResponse.Header.sender_id)
  return sender_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MessageQueryResponse_Header::release_sender_id() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.MessageQueryResponse.Header.sender_id)
  
  return sender_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MessageQueryResponse_Header::set_allocated_sender_id(::std::string* sender_id) {
  if (sender_id != NULL) {
    
  } else {
    
  }
  sender_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_id);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.MessageQueryResponse.Header.sender_id)
}

// optional .google.protobuf.Timestamp created_at = 9;
bool MessageQueryResponse_Header::has_created_at() const {
  return this != internal_default_instance() && created_at_ != NULL;
}
void MessageQueryResponse_Header::clear_created_at() {
  if (GetArenaNoVirtual() == NULL && created_at_ != NULL) delete created_at_;
  created_at_ = NULL;
}
const ::google::protobuf::Timestamp& MessageQueryResponse_Header::created_at() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.MessageQueryResponse.Header.created_at)
  return created_at_ != NULL ? *created_at_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* MessageQueryResponse_Header::mutable_created_at() {
  
  if (created_at_ == NULL) {
    created_at_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.MessageQueryResponse.Header.created_at)
  return created_at_;
}
::google::protobuf::Timestamp* MessageQueryResponse_Header::release_created_at() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.MessageQueryResponse.Header.created_at)
  
  ::google::protobuf::Timestamp* temp = created_at_;
  created_at_ = NULL;
  return temp;
}
void MessageQueryResponse_Header::set_allocated_created_at(::google::protobuf::Timestamp* created_at) {
  delete created_at_;
  if (created_at != NULL && created_at->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_created_at = new ::google::protobuf::Timestamp;
    new_created_at->CopyFrom(*created_at);
    created_at = new_created_at;
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.MessageQueryResponse.Header.created_at)
}

// optional string message_id = 10;
void MessageQueryResponse_Header::clear_message_id() {
  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MessageQueryResponse_Header::message_id() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.MessageQueryResponse.Header.message_id)
  return message_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MessageQueryResponse_Header::set_message_id(const ::std::string& value) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.MessageQueryResponse.Header.message_id)
}
void MessageQueryResponse_Header::set_message_id(const char* value) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.response.MessageQueryResponse.Header.message_id)
}
void MessageQueryResponse_Header::set_message_id(const char* value, size_t size) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.response.MessageQueryResponse.Header.message_id)
}
::std::string* MessageQueryResponse_Header::mutable_message_id() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.MessageQueryResponse.Header.message_id)
  return message_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MessageQueryResponse_Header::release_message_id() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.MessageQueryResponse.Header.message_id)
  
  return message_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MessageQueryResponse_Header::set_allocated_message_id(::std::string* message_id) {
  if (message_id != NULL) {
    
  } else {
    
  }
  message_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_id);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.MessageQueryResponse.Header.message_id)
}

inline const MessageQueryResponse_Header* MessageQueryResponse_Header::internal_default_instance() {
  return &MessageQueryResponse_Header_default_instance_.get();
}
// -------------------------------------------------------------------

// MessageQueryResponse_FeedMessage

// optional .agrirouter.feed.response.MessageQueryResponse.Header header = 1;
bool MessageQueryResponse_FeedMessage::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void MessageQueryResponse_FeedMessage::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::agrirouter::feed::response::MessageQueryResponse_Header& MessageQueryResponse_FeedMessage::header() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.MessageQueryResponse.FeedMessage.header)
  return header_ != NULL ? *header_
                         : *::agrirouter::feed::response::MessageQueryResponse_Header::internal_default_instance();
}
::agrirouter::feed::response::MessageQueryResponse_Header* MessageQueryResponse_FeedMessage::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::agrirouter::feed::response::MessageQueryResponse_Header;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.MessageQueryResponse.FeedMessage.header)
  return header_;
}
::agrirouter::feed::response::MessageQueryResponse_Header* MessageQueryResponse_FeedMessage::release_header() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.MessageQueryResponse.FeedMessage.header)
  
  ::agrirouter::feed::response::MessageQueryResponse_Header* temp = header_;
  header_ = NULL;
  return temp;
}
void MessageQueryResponse_FeedMessage::set_allocated_header(::agrirouter::feed::response::MessageQueryResponse_Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.MessageQueryResponse.FeedMessage.header)
}

// optional .google.protobuf.Any content = 2;
bool MessageQueryResponse_FeedMessage::has_content() const {
  return this != internal_default_instance() && content_ != NULL;
}
void MessageQueryResponse_FeedMessage::clear_content() {
  if (GetArenaNoVirtual() == NULL && content_ != NULL) delete content_;
  content_ = NULL;
}
const ::google::protobuf::Any& MessageQueryResponse_FeedMessage::content() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.MessageQueryResponse.FeedMessage.content)
  return content_ != NULL ? *content_
                         : *::google::protobuf::Any::internal_default_instance();
}
::google::protobuf::Any* MessageQueryResponse_FeedMessage::mutable_content() {
  
  if (content_ == NULL) {
    content_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.MessageQueryResponse.FeedMessage.content)
  return content_;
}
::google::protobuf::Any* MessageQueryResponse_FeedMessage::release_content() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.MessageQueryResponse.FeedMessage.content)
  
  ::google::protobuf::Any* temp = content_;
  content_ = NULL;
  return temp;
}
void MessageQueryResponse_FeedMessage::set_allocated_content(::google::protobuf::Any* content) {
  delete content_;
  content_ = content;
  if (content) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.MessageQueryResponse.FeedMessage.content)
}

inline const MessageQueryResponse_FeedMessage* MessageQueryResponse_FeedMessage::internal_default_instance() {
  return &MessageQueryResponse_FeedMessage_default_instance_.get();
}
// -------------------------------------------------------------------

// MessageQueryResponse

// optional .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
bool MessageQueryResponse::has_querymetrics() const {
  return this != internal_default_instance() && querymetrics_ != NULL;
}
void MessageQueryResponse::clear_querymetrics() {
  if (GetArenaNoVirtual() == NULL && querymetrics_ != NULL) delete querymetrics_;
  querymetrics_ = NULL;
}
const ::agrirouter::feed::response::QueryMetrics& MessageQueryResponse::querymetrics() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.MessageQueryResponse.queryMetrics)
  return querymetrics_ != NULL ? *querymetrics_
                         : *::agrirouter::feed::response::QueryMetrics::internal_default_instance();
}
::agrirouter::feed::response::QueryMetrics* MessageQueryResponse::mutable_querymetrics() {
  
  if (querymetrics_ == NULL) {
    querymetrics_ = new ::agrirouter::feed::response::QueryMetrics;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.MessageQueryResponse.queryMetrics)
  return querymetrics_;
}
::agrirouter::feed::response::QueryMetrics* MessageQueryResponse::release_querymetrics() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.MessageQueryResponse.queryMetrics)
  
  ::agrirouter::feed::response::QueryMetrics* temp = querymetrics_;
  querymetrics_ = NULL;
  return temp;
}
void MessageQueryResponse::set_allocated_querymetrics(::agrirouter::feed::response::QueryMetrics* querymetrics) {
  delete querymetrics_;
  querymetrics_ = querymetrics;
  if (querymetrics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.MessageQueryResponse.queryMetrics)
}

// optional .agrirouter.feed.response.Page page = 2;
bool MessageQueryResponse::has_page() const {
  return this != internal_default_instance() && page_ != NULL;
}
void MessageQueryResponse::clear_page() {
  if (GetArenaNoVirtual() == NULL && page_ != NULL) delete page_;
  page_ = NULL;
}
const ::agrirouter::feed::response::Page& MessageQueryResponse::page() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.MessageQueryResponse.page)
  return page_ != NULL ? *page_
                         : *::agrirouter::feed::response::Page::internal_default_instance();
}
::agrirouter::feed::response::Page* MessageQueryResponse::mutable_page() {
  
  if (page_ == NULL) {
    page_ = new ::agrirouter::feed::response::Page;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.MessageQueryResponse.page)
  return page_;
}
::agrirouter::feed::response::Page* MessageQueryResponse::release_page() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.MessageQueryResponse.page)
  
  ::agrirouter::feed::response::Page* temp = page_;
  page_ = NULL;
  return temp;
}
void MessageQueryResponse::set_allocated_page(::agrirouter::feed::response::Page* page) {
  delete page_;
  page_ = page;
  if (page) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.MessageQueryResponse.page)
}

// repeated .agrirouter.feed.response.MessageQueryResponse.FeedMessage messages = 3;
int MessageQueryResponse::messages_size() const {
  return messages_.size();
}
void MessageQueryResponse::clear_messages() {
  messages_.Clear();
}
const ::agrirouter::feed::response::MessageQueryResponse_FeedMessage& MessageQueryResponse::messages(int index) const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.MessageQueryResponse.messages)
  return messages_.Get(index);
}
::agrirouter::feed::response::MessageQueryResponse_FeedMessage* MessageQueryResponse::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.MessageQueryResponse.messages)
  return messages_.Mutable(index);
}
::agrirouter::feed::response::MessageQueryResponse_FeedMessage* MessageQueryResponse::add_messages() {
  // @@protoc_insertion_point(field_add:agrirouter.feed.response.MessageQueryResponse.messages)
  return messages_.Add();
}
::google::protobuf::RepeatedPtrField< ::agrirouter::feed::response::MessageQueryResponse_FeedMessage >*
MessageQueryResponse::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:agrirouter.feed.response.MessageQueryResponse.messages)
  return &messages_;
}
const ::google::protobuf::RepeatedPtrField< ::agrirouter::feed::response::MessageQueryResponse_FeedMessage >&
MessageQueryResponse::messages() const {
  // @@protoc_insertion_point(field_list:agrirouter.feed.response.MessageQueryResponse.messages)
  return messages_;
}

inline const MessageQueryResponse* MessageQueryResponse::internal_default_instance() {
  return &MessageQueryResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FailedMessageQueryResponse_Header::kTechnicalMessageTypeFieldNumber;
const int FailedMessageQueryResponse_Header::kTeamSetContextIdFieldNumber;
const int FailedMessageQueryResponse_Header::kPayloadSizeFieldNumber;
const int FailedMessageQueryResponse_Header::kSentTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FailedMessageQueryResponse_Header::FailedMessageQueryResponse_Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.feed.response.FailedMessageQueryResponse.Header)
}

void FailedMessageQueryResponse_Header::InitAsDefaultInstance() {
  sent_timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}

FailedMessageQueryResponse_Header::FailedMessageQueryResponse_Header(const FailedMessageQueryResponse_Header& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agrirouter.feed.response.FailedMessageQueryResponse.Header)
}

void FailedMessageQueryResponse_Header::SharedCtor() {
  technical_message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_set_context_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sent_timestamp_ = NULL;
  payload_size_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

FailedMessageQueryResponse_Header::~FailedMessageQueryResponse_Header() {
  // @@protoc_insertion_point(destructor:agrirouter.feed.response.FailedMessageQueryResponse.Header)
  SharedDtor();
}

void FailedMessageQueryResponse_Header::SharedDtor() {
  technical_message_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_set_context_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &FailedMessageQueryResponse_Header_default_instance_.get()) {
    delete sent_timestamp_;
  }
}

void FailedMessageQueryResponse_Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FailedMessageQueryResponse_Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FailedMessageQueryResponse_Header_descriptor_;
}

const FailedMessageQueryResponse_Header& FailedMessageQueryResponse_Header::default_instance() {
  protobuf_InitDefaults_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<FailedMessageQueryResponse_Header> FailedMessageQueryResponse_Header_default_instance_;

FailedMessageQueryResponse_Header* FailedMessageQueryResponse_Header::New(::google::protobuf::Arena* arena) const {
  FailedMessageQueryResponse_Header* n = new FailedMessageQueryResponse_Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FailedMessageQueryResponse_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.feed.response.FailedMessageQueryResponse.Header)
  technical_message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_set_context_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_size_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && sent_timestamp_ != NULL) delete sent_timestamp_;
  sent_timestamp_ = NULL;
}

bool FailedMessageQueryResponse_Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.feed.response.FailedMessageQueryResponse.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string technical_message_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_technical_message_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->technical_message_type().data(), this->technical_message_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.response.FailedMessageQueryResponse.Header.technical_message_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_team_set_context_id;
        break;
      }

      // optional string team_set_context_id = 2;
      case 2: {
        if (tag == 18) {
         parse_team_set_context_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_set_context_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->team_set_context_id().data(), this->team_set_context_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.response.FailedMessageQueryResponse.Header.team_set_context_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_payload_size;
        break;
      }

      // optional int64 payload_size = 3;
      case 3: {
        if (tag == 24) {
         parse_payload_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &payload_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sent_timestamp;
        break;
      }

      // optional .google.protobuf.Timestamp sent_timestamp = 4;
      case 4: {
        if (tag == 34) {
         parse_sent_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sent_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.feed.response.FailedMessageQueryResponse.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.feed.response.FailedMessageQueryResponse.Header)
  return false;
#undef DO_
}

void FailedMessageQueryResponse_Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.feed.response.FailedMessageQueryResponse.Header)
  // optional string technical_message_type = 1;
  if (this->technical_message_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->technical_message_type().data(), this->technical_message_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.FailedMessageQueryResponse.Header.technical_message_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->technical_message_type(), output);
  }

  // optional string team_set_context_id = 2;
  if (this->team_set_context_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team_set_context_id().data(), this->team_set_context_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.FailedMessageQueryResponse.Header.team_set_context_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->team_set_context_id(), output);
  }

  // optional int64 payload_size = 3;
  if (this->payload_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->payload_size(), output);
  }

  // optional .google.protobuf.Timestamp sent_timestamp = 4;
  if (this->has_sent_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->sent_timestamp_, output);
  }

  // @@protoc_insertion_point(serialize_end:agrirouter.feed.response.FailedMessageQueryResponse.Header)
}

::google::protobuf::uint8* FailedMessageQueryResponse_Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.feed.response.FailedMessageQueryResponse.Header)
  // optional string technical_message_type = 1;
  if (this->technical_message_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->technical_message_type().data(), this->technical_message_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.FailedMessageQueryResponse.Header.technical_message_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->technical_message_type(), target);
  }

  // optional string team_set_context_id = 2;
  if (this->team_set_context_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team_set_context_id().data(), this->team_set_context_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.FailedMessageQueryResponse.Header.team_set_context_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->team_set_context_id(), target);
  }

  // optional int64 payload_size = 3;
  if (this->payload_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->payload_size(), target);
  }

  // optional .google.protobuf.Timestamp sent_timestamp = 4;
  if (this->has_sent_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->sent_timestamp_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.feed.response.FailedMessageQueryResponse.Header)
  return target;
}

size_t FailedMessageQueryResponse_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.feed.response.FailedMessageQueryResponse.Header)
  size_t total_size = 0;

  // optional string technical_message_type = 1;
  if (this->technical_message_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->technical_message_type());
  }

  // optional string team_set_context_id = 2;
  if (this->team_set_context_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->team_set_context_id());
  }

  // optional int64 payload_size = 3;
  if (this->payload_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->payload_size());
  }

  // optional .google.protobuf.Timestamp sent_timestamp = 4;
  if (this->has_sent_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sent_timestamp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FailedMessageQueryResponse_Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.feed.response.FailedMessageQueryResponse.Header)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FailedMessageQueryResponse_Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FailedMessageQueryResponse_Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.feed.response.FailedMessageQueryResponse.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.feed.response.FailedMessageQueryResponse.Header)
    UnsafeMergeFrom(*source);
  }
}

void FailedMessageQueryResponse_Header::MergeFrom(const FailedMessageQueryResponse_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.feed.response.FailedMessageQueryResponse.Header)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void FailedMessageQueryResponse_Header::UnsafeMergeFrom(const FailedMessageQueryResponse_Header& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.technical_message_type().size() > 0) {

    technical_message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.technical_message_type_);
  }
  if (from.team_set_context_id().size() > 0) {

    team_set_context_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_set_context_id_);
  }
  if (from.payload_size() != 0) {
    set_payload_size(from.payload_size());
  }
  if (from.has_sent_timestamp()) {
    mutable_sent_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.sent_timestamp());
  }
}

void FailedMessageQueryResponse_Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.feed.response.FailedMessageQueryResponse.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FailedMessageQueryResponse_Header::CopyFrom(const FailedMessageQueryResponse_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.feed.response.FailedMessageQueryResponse.Header)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool FailedMessageQueryResponse_Header::IsInitialized() const {

  return true;
}

void FailedMessageQueryResponse_Header::Swap(FailedMessageQueryResponse_Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FailedMessageQueryResponse_Header::InternalSwap(FailedMessageQueryResponse_Header* other) {
  technical_message_type_.Swap(&other->technical_message_type_);
  team_set_context_id_.Swap(&other->team_set_context_id_);
  std::swap(payload_size_, other->payload_size_);
  std::swap(sent_timestamp_, other->sent_timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FailedMessageQueryResponse_Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FailedMessageQueryResponse_Header_descriptor_;
  metadata.reflection = FailedMessageQueryResponse_Header_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FailedMessageQueryResponse::kQueryMetricsFieldNumber;
const int FailedMessageQueryResponse::kPageFieldNumber;
const int FailedMessageQueryResponse::kHeaderFieldNumber;
const int FailedMessageQueryResponse::kReasonsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FailedMessageQueryResponse::FailedMessageQueryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.feed.response.FailedMessageQueryResponse)
}

void FailedMessageQueryResponse::InitAsDefaultInstance() {
  querymetrics_ = const_cast< ::agrirouter::feed::response::QueryMetrics*>(
      ::agrirouter::feed::response::QueryMetrics::internal_default_instance());
  page_ = const_cast< ::agrirouter::feed::response::Page*>(
      ::agrirouter::feed::response::Page::internal_default_instance());
  header_ = const_cast< ::agrirouter::feed::response::FailedMessageQueryResponse_Header*>(
      ::agrirouter::feed::response::FailedMessageQueryResponse_Header::internal_default_instance());
}

FailedMessageQueryResponse::FailedMessageQueryResponse(const FailedMessageQueryResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agrirouter.feed.response.FailedMessageQueryResponse)
}

void FailedMessageQueryResponse::SharedCtor() {
  querymetrics_ = NULL;
  page_ = NULL;
  header_ = NULL;
  _cached_size_ = 0;
}

FailedMessageQueryResponse::~FailedMessageQueryResponse() {
  // @@protoc_insertion_point(destructor:agrirouter.feed.response.FailedMessageQueryResponse)
  SharedDtor();
}

void FailedMessageQueryResponse::SharedDtor() {
  if (this != &FailedMessageQueryResponse_default_instance_.get()) {
    delete querymetrics_;
    delete page_;
    delete header_;
  }
}

void FailedMessageQueryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FailedMessageQueryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FailedMessageQueryResponse_descriptor_;
}

const FailedMessageQueryResponse& FailedMessageQueryResponse::default_instance() {
  protobuf_InitDefaults_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<FailedMessageQueryResponse> FailedMessageQueryResponse_default_instance_;

FailedMessageQueryResponse* FailedMessageQueryResponse::New(::google::protobuf::Arena* arena) const {
  FailedMessageQueryResponse* n = new FailedMessageQueryResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FailedMessageQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.feed.response.FailedMessageQueryResponse)
  if (GetArenaNoVirtual() == NULL && querymetrics_ != NULL) delete querymetrics_;
  querymetrics_ = NULL;
  if (GetArenaNoVirtual() == NULL && page_ != NULL) delete page_;
  page_ = NULL;
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  reasons_.Clear();
}

bool FailedMessageQueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.feed.response.FailedMessageQueryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_querymetrics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_page;
        break;
      }

      // optional .agrirouter.feed.response.Page page = 2;
      case 2: {
        if (tag == 18) {
         parse_page:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_page()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_header;
        break;
      }

      // optional .agrirouter.feed.response.FailedMessageQueryResponse.Header header = 3;
      case 3: {
        if (tag == 26) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reasons;
        break;
      }

      // repeated .agrirouter.commons.Message reasons = 4;
      case 4: {
        if (tag == 34) {
         parse_reasons:
          DO_(input->IncrementRecursionDepth());
         parse_loop_reasons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_reasons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_reasons;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.feed.response.FailedMessageQueryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.feed.response.FailedMessageQueryResponse)
  return false;
#undef DO_
}

void FailedMessageQueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.feed.response.FailedMessageQueryResponse)
  // optional .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
  if (this->has_querymetrics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->querymetrics_, output);
  }

  // optional .agrirouter.feed.response.Page page = 2;
  if (this->has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->page_, output);
  }

  // optional .agrirouter.feed.response.FailedMessageQueryResponse.Header header = 3;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->header_, output);
  }

  // repeated .agrirouter.commons.Message reasons = 4;
  for (unsigned int i = 0, n = this->reasons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reasons(i), output);
  }

  // @@protoc_insertion_point(serialize_end:agrirouter.feed.response.FailedMessageQueryResponse)
}

::google::protobuf::uint8* FailedMessageQueryResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.feed.response.FailedMessageQueryResponse)
  // optional .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
  if (this->has_querymetrics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->querymetrics_, false, target);
  }

  // optional .agrirouter.feed.response.Page page = 2;
  if (this->has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->page_, false, target);
  }

  // optional .agrirouter.feed.response.FailedMessageQueryResponse.Header header = 3;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->header_, false, target);
  }

  // repeated .agrirouter.commons.Message reasons = 4;
  for (unsigned int i = 0, n = this->reasons_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->reasons(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.feed.response.FailedMessageQueryResponse)
  return target;
}

size_t FailedMessageQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.feed.response.FailedMessageQueryResponse)
  size_t total_size = 0;

  // optional .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
  if (this->has_querymetrics()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->querymetrics_);
  }

  // optional .agrirouter.feed.response.Page page = 2;
  if (this->has_page()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->page_);
  }

  // optional .agrirouter.feed.response.FailedMessageQueryResponse.Header header = 3;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // repeated .agrirouter.commons.Message reasons = 4;
  {
    unsigned int count = this->reasons_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reasons(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FailedMessageQueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.feed.response.FailedMessageQueryResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FailedMessageQueryResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FailedMessageQueryResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.feed.response.FailedMessageQueryResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.feed.response.FailedMessageQueryResponse)
    UnsafeMergeFrom(*source);
  }
}

void FailedMessageQueryResponse::MergeFrom(const FailedMessageQueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.feed.response.FailedMessageQueryResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void FailedMessageQueryResponse::UnsafeMergeFrom(const FailedMessageQueryResponse& from) {
  GOOGLE_DCHECK(&from != this);
  reasons_.MergeFrom(from.reasons_);
  if (from.has_querymetrics()) {
    mutable_querymetrics()->::agrirouter::feed::response::QueryMetrics::MergeFrom(from.querymetrics());
  }
  if (from.has_page()) {
    mutable_page()->::agrirouter::feed::response::Page::MergeFrom(from.page());
  }
  if (from.has_header()) {
    mutable_header()->::agrirouter::feed::response::FailedMessageQueryResponse_Header::MergeFrom(from.header());
  }
}

void FailedMessageQueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.feed.response.FailedMessageQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FailedMessageQueryResponse::CopyFrom(const FailedMessageQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.feed.response.FailedMessageQueryResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool FailedMessageQueryResponse::IsInitialized() const {

  return true;
}

void FailedMessageQueryResponse::Swap(FailedMessageQueryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FailedMessageQueryResponse::InternalSwap(FailedMessageQueryResponse* other) {
  std::swap(querymetrics_, other->querymetrics_);
  std::swap(page_, other->page_);
  std::swap(header_, other->header_);
  reasons_.UnsafeArenaSwap(&other->reasons_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FailedMessageQueryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FailedMessageQueryResponse_descriptor_;
  metadata.reflection = FailedMessageQueryResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FailedMessageQueryResponse_Header

// optional string technical_message_type = 1;
void FailedMessageQueryResponse_Header::clear_technical_message_type() {
  technical_message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FailedMessageQueryResponse_Header::technical_message_type() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.FailedMessageQueryResponse.Header.technical_message_type)
  return technical_message_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FailedMessageQueryResponse_Header::set_technical_message_type(const ::std::string& value) {
  
  technical_message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.FailedMessageQueryResponse.Header.technical_message_type)
}
void FailedMessageQueryResponse_Header::set_technical_message_type(const char* value) {
  
  technical_message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.response.FailedMessageQueryResponse.Header.technical_message_type)
}
void FailedMessageQueryResponse_Header::set_technical_message_type(const char* value, size_t size) {
  
  technical_message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.response.FailedMessageQueryResponse.Header.technical_message_type)
}
::std::string* FailedMessageQueryResponse_Header::mutable_technical_message_type() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.FailedMessageQueryResponse.Header.technical_message_type)
  return technical_message_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FailedMessageQueryResponse_Header::release_technical_message_type() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.FailedMessageQueryResponse.Header.technical_message_type)
  
  return technical_message_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FailedMessageQueryResponse_Header::set_allocated_technical_message_type(::std::string* technical_message_type) {
  if (technical_message_type != NULL) {
    
  } else {
    
  }
  technical_message_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), technical_message_type);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.FailedMessageQueryResponse.Header.technical_message_type)
}

// optional string team_set_context_id = 2;
void FailedMessageQueryResponse_Header::clear_team_set_context_id() {
  team_set_context_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FailedMessageQueryResponse_Header::team_set_context_id() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.FailedMessageQueryResponse.Header.team_set_context_id)
  return team_set_context_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FailedMessageQueryResponse_Header::set_team_set_context_id(const ::std::string& value) {
  
  team_set_context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.FailedMessageQueryResponse.Header.team_set_context_id)
}
void FailedMessageQueryResponse_Header::set_team_set_context_id(const char* value) {
  
  team_set_context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.response.FailedMessageQueryResponse.Header.team_set_context_id)
}
void FailedMessageQueryResponse_Header::set_team_set_context_id(const char* value, size_t size) {
  
  team_set_context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.response.FailedMessageQueryResponse.Header.team_set_context_id)
}
::std::string* FailedMessageQueryResponse_Header::mutable_team_set_context_id() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.FailedMessageQueryResponse.Header.team_set_context_id)
  return team_set_context_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FailedMessageQueryResponse_Header::release_team_set_context_id() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.FailedMessageQueryResponse.Header.team_set_context_id)
  
  return team_set_context_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FailedMessageQueryResponse_Header::set_allocated_team_set_context_id(::std::string* team_set_context_id) {
  if (team_set_context_id != NULL) {
    
  } else {
    
  }
  team_set_context_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_set_context_id);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.FailedMessageQueryResponse.Header.team_set_context_id)
}

// optional int64 payload_size = 3;
void FailedMessageQueryResponse_Header::clear_payload_size() {
  payload_size_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 FailedMessageQueryResponse_Header::payload_size() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.FailedMessageQueryResponse.Header.payload_size)
  return payload_size_;
}
void FailedMessageQueryResponse_Header::set_payload_size(::google::protobuf::int64 value) {
  
  payload_size_ = value;
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.FailedMessageQueryResponse.Header.payload_size)
}

// optional .google.protobuf.Timestamp sent_timestamp = 4;
bool FailedMessageQueryResponse_Header::has_sent_timestamp() const {
  return this != internal_default_instance() && sent_timestamp_ != NULL;
}
void FailedMessageQueryResponse_Header::clear_sent_timestamp() {
  if (GetArenaNoVirtual() == NULL && sent_timestamp_ != NULL) delete sent_timestamp_;
  sent_timestamp_ = NULL;
}
const ::google::protobuf::Timestamp& FailedMessageQueryResponse_Header::sent_timestamp() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.FailedMessageQueryResponse.Header.sent_timestamp)
  return sent_timestamp_ != NULL ? *sent_timestamp_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* FailedMessageQueryResponse_Header::mutable_sent_timestamp() {
  
  if (sent_timestamp_ == NULL) {
    sent_timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.FailedMessageQueryResponse.Header.sent_timestamp)
  return sent_timestamp_;
}
::google::protobuf::Timestamp* FailedMessageQueryResponse_Header::release_sent_timestamp() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.FailedMessageQueryResponse.Header.sent_timestamp)
  
  ::google::protobuf::Timestamp* temp = sent_timestamp_;
  sent_timestamp_ = NULL;
  return temp;
}
void FailedMessageQueryResponse_Header::set_allocated_sent_timestamp(::google::protobuf::Timestamp* sent_timestamp) {
  delete sent_timestamp_;
  if (sent_timestamp != NULL && sent_timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_sent_timestamp = new ::google::protobuf::Timestamp;
    new_sent_timestamp->CopyFrom(*sent_timestamp);
    sent_timestamp = new_sent_timestamp;
  }
  sent_timestamp_ = sent_timestamp;
  if (sent_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.FailedMessageQueryResponse.Header.sent_timestamp)
}

inline const FailedMessageQueryResponse_Header* FailedMessageQueryResponse_Header::internal_default_instance() {
  return &FailedMessageQueryResponse_Header_default_instance_.get();
}
// -------------------------------------------------------------------

// FailedMessageQueryResponse

// optional .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
bool FailedMessageQueryResponse::has_querymetrics() const {
  return this != internal_default_instance() && querymetrics_ != NULL;
}
void FailedMessageQueryResponse::clear_querymetrics() {
  if (GetArenaNoVirtual() == NULL && querymetrics_ != NULL) delete querymetrics_;
  querymetrics_ = NULL;
}
const ::agrirouter::feed::response::QueryMetrics& FailedMessageQueryResponse::querymetrics() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.FailedMessageQueryResponse.queryMetrics)
  return querymetrics_ != NULL ? *querymetrics_
                         : *::agrirouter::feed::response::QueryMetrics::internal_default_instance();
}
::agrirouter::feed::response::QueryMetrics* FailedMessageQueryResponse::mutable_querymetrics() {
  
  if (querymetrics_ == NULL) {
    querymetrics_ = new ::agrirouter::feed::response::QueryMetrics;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.FailedMessageQueryResponse.queryMetrics)
  return querymetrics_;
}
::agrirouter::feed::response::QueryMetrics* FailedMessageQueryResponse::release_querymetrics() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.FailedMessageQueryResponse.queryMetrics)
  
  ::agrirouter::feed::response::QueryMetrics* temp = querymetrics_;
  querymetrics_ = NULL;
  return temp;
}
void FailedMessageQueryResponse::set_allocated_querymetrics(::agrirouter::feed::response::QueryMetrics* querymetrics) {
  delete querymetrics_;
  querymetrics_ = querymetrics;
  if (querymetrics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.FailedMessageQueryResponse.queryMetrics)
}

// optional .agrirouter.feed.response.Page page = 2;
bool FailedMessageQueryResponse::has_page() const {
  return this != internal_default_instance() && page_ != NULL;
}
void FailedMessageQueryResponse::clear_page() {
  if (GetArenaNoVirtual() == NULL && page_ != NULL) delete page_;
  page_ = NULL;
}
const ::agrirouter::feed::response::Page& FailedMessageQueryResponse::page() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.FailedMessageQueryResponse.page)
  return page_ != NULL ? *page_
                         : *::agrirouter::feed::response::Page::internal_default_instance();
}
::agrirouter::feed::response::Page* FailedMessageQueryResponse::mutable_page() {
  
  if (page_ == NULL) {
    page_ = new ::agrirouter::feed::response::Page;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.FailedMessageQueryResponse.page)
  return page_;
}
::agrirouter::feed::response::Page* FailedMessageQueryResponse::release_page() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.FailedMessageQueryResponse.page)
  
  ::agrirouter::feed::response::Page* temp = page_;
  page_ = NULL;
  return temp;
}
void FailedMessageQueryResponse::set_allocated_page(::agrirouter::feed::response::Page* page) {
  delete page_;
  page_ = page;
  if (page) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.FailedMessageQueryResponse.page)
}

// optional .agrirouter.feed.response.FailedMessageQueryResponse.Header header = 3;
bool FailedMessageQueryResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void FailedMessageQueryResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::agrirouter::feed::response::FailedMessageQueryResponse_Header& FailedMessageQueryResponse::header() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.FailedMessageQueryResponse.header)
  return header_ != NULL ? *header_
                         : *::agrirouter::feed::response::FailedMessageQueryResponse_Header::internal_default_instance();
}
::agrirouter::feed::response::FailedMessageQueryResponse_Header* FailedMessageQueryResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::agrirouter::feed::response::FailedMessageQueryResponse_Header;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.FailedMessageQueryResponse.header)
  return header_;
}
::agrirouter::feed::response::FailedMessageQueryResponse_Header* FailedMessageQueryResponse::release_header() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.FailedMessageQueryResponse.header)
  
  ::agrirouter::feed::response::FailedMessageQueryResponse_Header* temp = header_;
  header_ = NULL;
  return temp;
}
void FailedMessageQueryResponse::set_allocated_header(::agrirouter::feed::response::FailedMessageQueryResponse_Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.FailedMessageQueryResponse.header)
}

// repeated .agrirouter.commons.Message reasons = 4;
int FailedMessageQueryResponse::reasons_size() const {
  return reasons_.size();
}
void FailedMessageQueryResponse::clear_reasons() {
  reasons_.Clear();
}
const ::agrirouter::commons::Message& FailedMessageQueryResponse::reasons(int index) const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.FailedMessageQueryResponse.reasons)
  return reasons_.Get(index);
}
::agrirouter::commons::Message* FailedMessageQueryResponse::mutable_reasons(int index) {
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.FailedMessageQueryResponse.reasons)
  return reasons_.Mutable(index);
}
::agrirouter::commons::Message* FailedMessageQueryResponse::add_reasons() {
  // @@protoc_insertion_point(field_add:agrirouter.feed.response.FailedMessageQueryResponse.reasons)
  return reasons_.Add();
}
::google::protobuf::RepeatedPtrField< ::agrirouter::commons::Message >*
FailedMessageQueryResponse::mutable_reasons() {
  // @@protoc_insertion_point(field_mutable_list:agrirouter.feed.response.FailedMessageQueryResponse.reasons)
  return &reasons_;
}
const ::google::protobuf::RepeatedPtrField< ::agrirouter::commons::Message >&
FailedMessageQueryResponse::reasons() const {
  // @@protoc_insertion_point(field_list:agrirouter.feed.response.FailedMessageQueryResponse.reasons)
  return reasons_;
}

inline const FailedMessageQueryResponse* FailedMessageQueryResponse::internal_default_instance() {
  return &FailedMessageQueryResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace response
}  // namespace feed
}  // namespace agrirouter

// @@protoc_insertion_point(global_scope)
